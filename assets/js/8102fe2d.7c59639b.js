"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[80805],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var a=i(96540);const t={},s=a.createContext(t);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},79318:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"programming-and-tools/development/git/git-commands","title":"Git Command Reference","description":"Essential Git commands for version control and collaboration","source":"@site/docs/2-programming-and-tools/development/git/git-commands.md","sourceDirName":"2-programming-and-tools/development/git","slug":"/programming-and-tools/development/git/git-commands","permalink":"/docs/programming-and-tools/development/git/git-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/development/git/git-commands.md","tags":[{"inline":true,"label":"Git","permalink":"/docs/tags/git"},{"inline":true,"label":"Version Control","permalink":"/docs/tags/version-control"},{"inline":true,"label":"GitHub","permalink":"/docs/tags/git-hub"},{"inline":true,"label":"Development","permalink":"/docs/tags/development"}],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Git Command Reference","description":"Essential Git commands for version control and collaboration","tags":["Git","Version Control","GitHub","Development"],"authors":"youkoutaku"},"sidebar":"tutorialSidebar","previous":{"title":"Git Version Control","permalink":"/docs/category/git-version-control"},"next":{"title":"Linux System Administration","permalink":"/docs/category/linux-system-administration"}}');var t=i(74848),s=i(28453);const o={sidebar_position:1,title:"Git Command Reference",description:"Essential Git commands for version control and collaboration",tags:["Git","Version Control","GitHub","Development"],authors:"youkoutaku"},r="Git Command Reference",l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Set Your Identity",id:"set-your-identity",level:4},{value:"Check Your Configuration",id:"check-your-configuration",level:4},{value:"Additional Useful Configuration",id:"additional-useful-configuration",level:4},{value:"Repository Setup",id:"repository-setup",level:2},{value:"Initialize a New Repository",id:"initialize-a-new-repository",level:3},{value:"Clone an Existing Repository",id:"clone-an-existing-repository",level:3},{value:"Working with Changes",id:"working-with-changes",level:2},{value:"Check Repository Status",id:"check-repository-status",level:3},{value:"Viewing Changes",id:"viewing-changes",level:3},{value:"Staging Changes",id:"staging-changes",level:3},{value:"Unstaging Changes",id:"unstaging-changes",level:3},{value:"Discarding Changes",id:"discarding-changes",level:3},{value:"Committing Changes",id:"committing-changes",level:2},{value:"Basic Commits",id:"basic-commits",level:3},{value:"Advanced Commit Options",id:"advanced-commit-options",level:3},{value:"Remote Repositories",id:"remote-repositories",level:2},{value:"Managing Remotes",id:"managing-remotes",level:3},{value:"Syncing with Remotes",id:"syncing-with-remotes",level:3},{value:"Branch Management",id:"branch-management",level:2},{value:"Creating and Switching Branches",id:"creating-and-switching-branches",level:3},{value:"Branch Operations",id:"branch-operations",level:3},{value:"Merging and Rebasing",id:"merging-and-rebasing",level:2},{value:"Merging",id:"merging",level:3},{value:"Rebasing",id:"rebasing",level:3},{value:"Viewing History",id:"viewing-history",level:2},{value:"Log Commands",id:"log-commands",level:3},{value:"Show Specific Commits",id:"show-specific-commits",level:3},{value:"Undoing Changes",id:"undoing-changes",level:2},{value:"Reset Commands",id:"reset-commands",level:3},{value:"Revert Commands",id:"revert-commands",level:3},{value:"Stashing",id:"stashing",level:2},{value:"Basic Stashing",id:"basic-stashing",level:3},{value:"Advanced Stashing",id:"advanced-stashing",level:3},{value:"Tags",id:"tags",level:2},{value:"Creating Tags",id:"creating-tags",level:3},{value:"Managing Tags",id:"managing-tags",level:3},{value:"Useful Aliases",id:"useful-aliases",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Resolve Merge Conflicts",id:"resolve-merge-conflicts",level:4},{value:"Fix Commit Messages",id:"fix-commit-messages",level:4},{value:"Recover Deleted Commits",id:"recover-deleted-commits",level:4},{value:"Useful Investigation Commands",id:"useful-investigation-commands",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Commit Message Guidelines",id:"commit-message-guidelines",level:3},{value:"Workflow Tips",id:"workflow-tips",level:3},{value:"Example .gitignore",id:"example-gitignore",level:3},{value:"Resources",id:"resources",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"git-command-reference",children:"Git Command Reference"})}),"\n",(0,t.jsx)(n.p,{children:"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. This guide covers the essential Git commands for daily development work."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://git-scm.com/images/branching-illustration@2x.png",alt:"Git Branching"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Download and install Git from the ",(0,t.jsx)(n.a,{href:"https://git-scm.com/downloads",children:"official website"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"set-your-identity",children:"Set Your Identity"}),"\n",(0,t.jsx)(n.p,{children:"Configure your username and email address:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set your Git username globally\ngit config --global user.name "Your Name"\n\n# Set your Git email address globally\ngit config --global user.email "youremail@example.com"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"check-your-configuration",children:"Check Your Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# View all configuration settings\ngit config --list\n\n# View specific configuration\ngit config user.name\ngit config user.email\n"})}),"\n",(0,t.jsx)(n.h4,{id:"additional-useful-configuration",children:"Additional Useful Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set default editor\ngit config --global core.editor "code --wait"  # For VS Code\ngit config --global core.editor "vim"          # For Vim\n\n# Set default branch name\ngit config --global init.defaultBranch main\n\n# Enable colored output\ngit config --global color.ui auto\n\n# Set up line ending handling\ngit config --global core.autocrlf input   # On macOS/Linux\ngit config --global core.autocrlf true    # On Windows\n'})}),"\n",(0,t.jsx)(n.h2,{id:"repository-setup",children:"Repository Setup"}),"\n",(0,t.jsx)(n.h3,{id:"initialize-a-new-repository",children:"Initialize a New Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Initialize a new Git repository in current directory\ngit init\n\n# Initialize with a specific branch name\ngit init --initial-branch=main\ngit init -b main\n"})}),"\n",(0,t.jsx)(n.h3,{id:"clone-an-existing-repository",children:"Clone an Existing Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Clone a repository\ngit clone <repository_URL>\n\n# Clone into a specific directory\ngit clone <repository_URL> <directory_name>\n\n# Clone a specific branch\ngit clone -b <branch_name> <repository_URL>\n\n# Shallow clone (only recent history)\ngit clone --depth 1 <repository_URL>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"working-with-changes",children:"Working with Changes"}),"\n",(0,t.jsx)(n.h3,{id:"check-repository-status",children:"Check Repository Status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Show the status of working directory and staging area\ngit status\n\n# Show status in short format\ngit status -s\ngit status --short\n"})}),"\n",(0,t.jsx)(n.h3,{id:"viewing-changes",children:"Viewing Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Show unstaged changes\ngit diff\n\n# Show staged changes\ngit diff --staged\ngit diff --cached\n\n# Show changes between commits\ngit diff <commit1> <commit2>\n\n# Show changes for a specific file\ngit diff <file_name>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"staging-changes",children:"Staging Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Stage a specific file\ngit add <file_name>\n\n# Stage all changes in current directory\ngit add .\n\n# Stage all changes in repository\ngit add -A\ngit add --all\n\n# Stage only modified files (not new files)\ngit add -u\ngit add --update\n\n# Interactive staging\ngit add -i\ngit add --interactive\n\n# Stage parts of a file\ngit add -p <file_name>\ngit add --patch <file_name>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"unstaging-changes",children:"Unstaging Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Unstage a file (keep changes in working directory)\ngit restore --staged <file_name>\ngit reset HEAD <file_name>  # Older syntax\n\n# Unstage all files\ngit restore --staged .\ngit reset HEAD .  # Older syntax\n"})}),"\n",(0,t.jsx)(n.h3,{id:"discarding-changes",children:"Discarding Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Discard changes in working directory\ngit restore <file_name>\ngit checkout -- <file_name>  # Older syntax\n\n# Discard all changes in working directory\ngit restore .\ngit checkout -- .  # Older syntax\n\n# Remove untracked files\ngit clean -f\n\n# Remove untracked files and directories\ngit clean -fd\n\n# Preview what would be removed\ngit clean -n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"committing-changes",children:"Committing Changes"}),"\n",(0,t.jsx)(n.h3,{id:"basic-commits",children:"Basic Commits"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Commit staged changes with a message\ngit commit -m "Your commit message"\n\n# Commit all tracked files (skip staging)\ngit commit -a -m "Your commit message"\ngit commit -am "Your commit message"\n\n# Commit with a multi-line message\ngit commit  # Opens editor for message\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-commit-options",children:"Advanced Commit Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Modify the last commit (message or files)\ngit commit --amend\n\n# Modify last commit without changing message\ngit commit --amend --no-edit\n\n# Commit with detailed message\ngit commit -m "Short description" -m "Longer detailed description"\n\n# Create an empty commit\ngit commit --allow-empty -m "Empty commit message"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"remote-repositories",children:"Remote Repositories"}),"\n",(0,t.jsx)(n.h3,{id:"managing-remotes",children:"Managing Remotes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Add a remote repository\ngit remote add origin <repository_URL>\n\n# View remote repositories\ngit remote -v\n\n# Change remote URL\ngit remote set-url origin <new_repository_URL>\n\n# Remove a remote\ngit remote remove origin\n"})}),"\n",(0,t.jsx)(n.h3,{id:"syncing-with-remotes",children:"Syncing with Remotes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Fetch changes from remote (don't merge)\ngit fetch\n\n# Fetch from specific remote\ngit fetch origin\n\n# Pull changes (fetch + merge)\ngit pull\n\n# Pull from specific remote and branch\ngit pull origin main\n\n# Pull with rebase instead of merge\ngit pull --rebase\n\n# Push changes to remote\ngit push\n\n# Push to specific remote and branch\ngit push origin main\n\n# Push and set upstream branch\ngit push -u origin main\ngit push --set-upstream origin main\n\n# Force push (use with caution!)\ngit push --force\ngit push -f\n"})}),"\n",(0,t.jsx)(n.h2,{id:"branch-management",children:"Branch Management"}),"\n",(0,t.jsx)(n.h3,{id:"creating-and-switching-branches",children:"Creating and Switching Branches"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all local branches\ngit branch\n\n# List all branches (local and remote)\ngit branch -a\n\n# Create a new branch\ngit branch <branch_name>\n\n# Switch to a branch\ngit checkout <branch_name>\ngit switch <branch_name>  # Newer syntax\n\n# Create and switch to new branch\ngit checkout -b <branch_name>\ngit switch -c <branch_name>  # Newer syntax\n\n# Create branch from specific commit\ngit checkout -b <branch_name> <commit_hash>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"branch-operations",children:"Branch Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Rename current branch\ngit branch -m <new_branch_name>\n\n# Rename a specific branch\ngit branch -m <old_name> <new_name>\n\n# Delete a local branch\ngit branch -d <branch_name>\n\n# Force delete a local branch\ngit branch -D <branch_name>\n\n# Delete a remote branch\ngit push origin --delete <branch_name>\n\n# Track a remote branch\ngit branch --set-upstream-to=origin/<branch_name>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"merging-and-rebasing",children:"Merging and Rebasing"}),"\n",(0,t.jsx)(n.h3,{id:"merging",children:"Merging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Merge a branch into current branch\ngit merge <branch_name>\n\n# Merge without fast-forward\ngit merge --no-ff <branch_name>\n\n# Abort a merge in progress\ngit merge --abort\n\n# Create merge commit even for fast-forward\ngit merge --no-ff <branch_name>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rebasing",children:"Rebasing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Rebase current branch onto another branch\ngit rebase <branch_name>\n\n# Interactive rebase\ngit rebase -i <commit_hash>\ngit rebase -i HEAD~3  # Last 3 commits\n\n# Abort rebase\ngit rebase --abort\n\n# Continue rebase after resolving conflicts\ngit rebase --continue\n\n# Skip current commit during rebase\ngit rebase --skip\n"})}),"\n",(0,t.jsx)(n.h2,{id:"viewing-history",children:"Viewing History"}),"\n",(0,t.jsx)(n.h3,{id:"log-commands",children:"Log Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# View commit history\ngit log\n\n# One line per commit\ngit log --oneline\n\n# Show branch graph\ngit log --graph --oneline --all\n\n# Show commits with file changes\ngit log --stat\n\n# Show commits with actual changes\ngit log -p\ngit log --patch\n\n# Limit number of commits shown\ngit log -5\ngit log -n 5\n\n# Show commits since a date\ngit log --since="2023-01-01"\ngit log --after="2023-01-01"\n\n# Show commits by author\ngit log --author="Your Name"\n\n# Search commit messages\ngit log --grep="bug fix"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"show-specific-commits",children:"Show Specific Commits"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Show details of a specific commit\ngit show <commit_hash>\n\n# Show files changed in a commit\ngit show --name-only <commit_hash>\n\n# Show file content at specific commit\ngit show <commit_hash>:<file_path>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"undoing-changes",children:"Undoing Changes"}),"\n",(0,t.jsx)(n.h3,{id:"reset-commands",children:"Reset Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Unstage files (keep changes)\ngit reset\n\n# Reset to specific commit (keep changes)\ngit reset <commit_hash>\n\n# Reset and unstage all changes\ngit reset --mixed <commit_hash>\n\n# Reset and discard all changes\ngit reset --hard <commit_hash>\n\n# Reset but keep changes staged\ngit reset --soft <commit_hash>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"revert-commands",children:"Revert Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create new commit that undoes a previous commit\ngit revert <commit_hash>\n\n# Revert without creating commit\ngit revert --no-commit <commit_hash>\n\n# Revert a merge commit\ngit revert -m 1 <merge_commit_hash>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"stashing",children:"Stashing"}),"\n",(0,t.jsx)(n.h3,{id:"basic-stashing",children:"Basic Stashing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Stash current changes\ngit stash\n\n# Stash with a message\ngit stash push -m "Work in progress"\n\n# List all stashes\ngit stash list\n\n# Apply most recent stash\ngit stash apply\n\n# Apply and remove most recent stash\ngit stash pop\n\n# Apply a specific stash\ngit stash apply stash@{2}\n\n# Drop a stash\ngit stash drop stash@{1}\n\n# Clear all stashes\ngit stash clear\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-stashing",children:"Advanced Stashing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Stash including untracked files\ngit stash -u\ngit stash --include-untracked\n\n# Stash only specific files\ngit stash push <file1> <file2>\n\n# Create branch from stash\ngit stash branch <branch_name> stash@{1}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"tags",children:"Tags"}),"\n",(0,t.jsx)(n.h3,{id:"creating-tags",children:"Creating Tags"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create lightweight tag\ngit tag <tag_name>\n\n# Create annotated tag\ngit tag -a <tag_name> -m "Tag message"\n\n# Tag a specific commit\ngit tag <tag_name> <commit_hash>\n\n# List all tags\ngit tag\n\n# Show tag information\ngit show <tag_name>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-tags",children:"Managing Tags"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Push tags to remote\ngit push origin <tag_name>\ngit push origin --tags\n\n# Delete local tag\ngit tag -d <tag_name>\n\n# Delete remote tag\ngit push origin --delete <tag_name>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"useful-aliases",children:"Useful Aliases"}),"\n",(0,t.jsx)(n.p,{children:"Add these to your Git configuration for faster workflows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Set up useful aliases\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\ngit config --global alias.visual '!gitk'\ngit config --global alias.lg \"log --oneline --graph --all\"\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"resolve-merge-conflicts",children:"Resolve Merge Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# After resolving conflicts in files\ngit add <resolved_file>\ngit commit\n\n# Or abort the merge\ngit merge --abort\n"})}),"\n",(0,t.jsx)(n.h4,{id:"fix-commit-messages",children:"Fix Commit Messages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Fix last commit message\ngit commit --amend -m "New commit message"\n\n# Fix older commit messages (interactive rebase)\ngit rebase -i HEAD~3\n'})}),"\n",(0,t.jsx)(n.h4,{id:"recover-deleted-commits",children:"Recover Deleted Commits"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Find lost commits\ngit reflog\n\n# Recover a specific commit\ngit checkout <commit_hash>\ngit cherry-pick <commit_hash>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"useful-investigation-commands",children:"Useful Investigation Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Find when a line was changed\ngit blame <file_name>\n\n# Search for text in commit history\ngit log -S "search_term"\n\n# Find commits that touch a specific file\ngit log --follow <file_name>\n\n# See what changed between branches\ngit diff main..feature-branch\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"commit-message-guidelines",children:"Commit Message Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Use imperative mood ("Add feature" not "Added feature")'}),"\n",(0,t.jsx)(n.li,{children:"Keep first line under 50 characters"}),"\n",(0,t.jsx)(n.li,{children:"Add detailed description after blank line if needed"}),"\n",(0,t.jsx)(n.li,{children:"Reference issue numbers when applicable"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-tips",children:"Workflow Tips"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pull before push"}),": Always pull latest changes before pushing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use branches"}),": Create feature branches for new work"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commit often"}),": Make small, logical commits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Review before commit"}),": Check ",(0,t.jsx)(n.code,{children:"git diff --staged"})," before committing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Use ",(0,t.jsx)(n.code,{children:".gitignore"})]}),": Ignore files that shouldn't be tracked"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-gitignore",children:"Example .gitignore"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gitignore",children:"# Dependencies\nnode_modules/\n*.log\n\n# Build outputs\ndist/\nbuild/\n\n# IDE files\n.vscode/\n.idea/\n\n# OS files\n.DS_Store\nThumbs.db\n\n# Environment files\n.env\n.env.local\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://git-scm.com/doc",children:"Official Git Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://training.github.com/",children:"GitHub Training Kit"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learngitbranching.js.org/",children:"Interactive Git Tutorial"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://git-scm.com/book",children:"Pro Git Book"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}}}]);