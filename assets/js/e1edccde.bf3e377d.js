"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[42769],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var o=i(96540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},94268:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/user-input-while-loops","title":"User Input and while Loops","description":"Making programs interactive with user input and while loops","source":"@site/docs/2-programming-and-tools/1-languages/1-python/crash-course/07-user-input-while-loops.md","sourceDirName":"2-programming-and-tools/1-languages/1-python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/user-input-while-loops","permalink":"/docs/programming-and-tools/languages/python/crash-course/user-input-while-loops","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/1-languages/1-python/crash-course/07-user-input-while-loops.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"User Input and while Loops","description":"Making programs interactive with user input and while loops","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Dictionaries","permalink":"/docs/programming-and-tools/languages/python/crash-course/dictionaries"},"next":{"title":"Functions","permalink":"/docs/programming-and-tools/languages/python/crash-course/functions"}}');var t=i(74848),s=i(28453);const r={title:"User Input and while Loops",description:"Making programs interactive with user input and while loops",sidebar_position:7},l="User Input and while Loops",a={},c=[{value:"How the input() Function Works",id:"how-the-input-function-works",level:2},{value:"Writing Clear Prompts",id:"writing-clear-prompts",level:3},{value:"Using int() to Accept Numerical Input",id:"using-int-to-accept-numerical-input",level:3},{value:"The Modulo Operator",id:"the-modulo-operator",level:4},{value:"Introducing while Loops",id:"introducing-while-loops",level:2},{value:"The while Loop in Action",id:"the-while-loop-in-action",level:3},{value:"Letting the User Choose When to Quit",id:"letting-the-user-choose-when-to-quit",level:3},{value:"Using a Flag",id:"using-a-flag",level:3},{value:"Using break to Exit a Loop",id:"using-break-to-exit-a-loop",level:3},{value:"Using continue in a Loop",id:"using-continue-in-a-loop",level:3},{value:"Avoiding Infinite Loops",id:"avoiding-infinite-loops",level:3},{value:"Using a while Loop with Lists and Dictionaries",id:"using-a-while-loop-with-lists-and-dictionaries",level:2},{value:"Moving Items Between Lists",id:"moving-items-between-lists",level:3},{value:"Removing All Instances of Specific Values from a List",id:"removing-all-instances-of-specific-values-from-a-list",level:3},{value:"Filling a Dictionary with User Input",id:"filling-a-dictionary-with-user-input",level:3},{value:"Summary",id:"summary",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"user-input-and-while-loops",children:"User Input and while Loops"})}),"\n",(0,t.jsx)(n.p,{children:"Most programs are written to solve an end user's problem. To do so, you usually need to get some information from the user. In this chapter, you'll learn how to accept user input so your program can work with it, and you'll learn how to keep programs running as long as users want them to."}),"\n",(0,t.jsx)(n.h2,{id:"how-the-input-function-works",children:"How the input() Function Works"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"input()"})," function pauses your program and waits for the user to enter some text:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'message = input("Tell me something, and I will repeat it back to you: ")\nprint(message)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Tell me something, and I will repeat it back to you: Hello everyone!\nHello everyone!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"writing-clear-prompts",children:"Writing Clear Prompts"}),"\n",(0,t.jsxs)(n.p,{children:["Each time you use the ",(0,t.jsx)(n.code,{children:"input()"})," function, you should include a clear, easy-to-follow prompt:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'name = input("Please enter your name: ")\nprint(f"\\nHello, {name}!")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Sometimes you'll want to write a prompt that's longer than one line:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prompt = "If you tell us who you are, we can personalize the messages you see."\nprompt += "\\nWhat is your first name? "\n\nname = input(prompt)\nprint(f"\\nHello, {name}!")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-int-to-accept-numerical-input",children:"Using int() to Accept Numerical Input"}),"\n",(0,t.jsxs)(n.p,{children:["When you use the ",(0,t.jsx)(n.code,{children:"input()"})," function, Python interprets everything the user enters as a string:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"age = input(\"How old are you? \")\nprint(type(age))  # <class 'str'>\n\nage = int(age)\nprint(type(age))  # <class 'int'>\n"})}),"\n",(0,t.jsx)(n.h4,{id:"the-modulo-operator",children:"The Modulo Operator"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"modulo operator"})," (",(0,t.jsx)(n.code,{children:"%"}),") divides one number by another number and returns the remainder:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(4 % 3)  # 1\nprint(5 % 3)  # 2\nprint(6 % 3)  # 0\n"})}),"\n",(0,t.jsx)(n.p,{children:"When one number is divisible by another number, the remainder is 0, so the modulo operator always returns 0. This is useful for determining if a number is even or odd."}),"\n",(0,t.jsx)(n.h2,{id:"introducing-while-loops",children:"Introducing while Loops"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"for"})," loop takes a collection of items and executes a block of code once for each item. In contrast, a ",(0,t.jsx)(n.code,{children:"while"})," loop runs as long as, or while, a certain condition is true."]}),"\n",(0,t.jsx)(n.h3,{id:"the-while-loop-in-action",children:"The while Loop in Action"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"current_number = 1\nwhile current_number <= 5:\n    print(current_number)\n    current_number += 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"1\n2\n3\n4\n5\n"})}),"\n",(0,t.jsx)(n.h3,{id:"letting-the-user-choose-when-to-quit",children:"Letting the User Choose When to Quit"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prompt = "\\nTell me something, and I will repeat it back to you:"\nprompt += "\\nEnter \'quit\' to end the program. "\n\nmessage = ""\nwhile message != \'quit\':\n    message = input(prompt)\n    print(message)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This program works, but it prints 'quit' as a message. A simple fix is to test the message before printing it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nmessage = \"\"\nwhile message != 'quit':\n    message = input(prompt)\n    \n    if message != 'quit':\n        print(message)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-a-flag",children:"Using a Flag"}),"\n",(0,t.jsxs)(n.p,{children:["For a program that should run only as long as many conditions are true, you can define one variable that determines whether or not the entire program is active. This variable, called a ",(0,t.jsx)(n.strong,{children:"flag"}),", acts as a signal to the program:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nactive = True\nwhile active:\n    message = input(prompt)\n    \n    if message == 'quit':\n        active = False\n    else:\n        print(message)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-break-to-exit-a-loop",children:"Using break to Exit a Loop"}),"\n",(0,t.jsxs)(n.p,{children:["To exit a ",(0,t.jsx)(n.code,{children:"while"})," loop immediately without running any remaining code in the loop, use the ",(0,t.jsx)(n.code,{children:"break"})," statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nwhile True:\n    message = input(prompt)\n    \n    if message == 'quit':\n        break\n    else:\n        print(message)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-continue-in-a-loop",children:"Using continue in a Loop"}),"\n",(0,t.jsxs)(n.p,{children:["Rather than breaking out of a loop entirely, you can use the ",(0,t.jsx)(n.code,{children:"continue"})," statement to return to the beginning of the loop:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"current_number = 0\nwhile current_number < 10:\n    current_number += 1\n    if current_number % 2 == 0:\n        continue\n    \n    print(current_number)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"1\n3\n5\n7\n9\n"})}),"\n",(0,t.jsx)(n.h3,{id:"avoiding-infinite-loops",children:"Avoiding Infinite Loops"}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"while"})," loop needs a way to stop running so it won't continue to run forever:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# This will run forever!\nx = 1\nwhile x <= 5:\n    print(x)\n    # Missing: x += 1\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["If your program gets stuck in an infinite loop, press ",(0,t.jsx)(n.code,{children:"Ctrl+C"})," or close the terminal window displaying your program's output."]})}),"\n",(0,t.jsx)(n.h2,{id:"using-a-while-loop-with-lists-and-dictionaries",children:"Using a while Loop with Lists and Dictionaries"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"for"})," loop is effective for looping through a list, but you shouldn't modify a list inside a ",(0,t.jsx)(n.code,{children:"for"})," loop because Python will have trouble keeping track of the items in the list. To modify a list as you work through it, use a ",(0,t.jsx)(n.code,{children:"while"})," loop."]}),"\n",(0,t.jsx)(n.h3,{id:"moving-items-between-lists",children:"Moving Items Between Lists"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Start with users that need to be verified,\n# and an empty list to hold confirmed users.\nunconfirmed_users = ['alice', 'brian', 'candace']\nconfirmed_users = []\n\n# Verify each user until there are no more unconfirmed users.\n# Move each verified user into the list of confirmed users.\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop()\n    \n    print(f\"Verifying user: {current_user.title()}\")\n    confirmed_users.append(current_user)\n\n# Display all confirmed users.\nprint(\"\\nThe following users have been confirmed:\")\nfor confirmed_user in confirmed_users:\n    print(confirmed_user.title())\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Verifying user: Candace\nVerifying user: Brian\nVerifying user: Alice\n\nThe following users have been confirmed:\nCandace\nBrian\nAlice\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removing-all-instances-of-specific-values-from-a-list",children:"Removing All Instances of Specific Values from a List"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"remove()"})," function removes only the first occurrence of a value. You can use a ",(0,t.jsx)(n.code,{children:"while"})," loop to remove all occurrences:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\n\nwhile 'cat' in pets:\n    pets.remove('cat')\n    \nprint(pets)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n['dog', 'dog', 'goldfish', 'rabbit']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filling-a-dictionary-with-user-input",children:"Filling a Dictionary with User Input"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'responses = {}\n\n# Set a flag to indicate that polling is active.\npolling_active = True\n\nwhile polling_active:\n    # Prompt for the person\'s name and response.\n    name = input("\\nWhat is your name? ")\n    response = input("Which mountain would you like to climb someday? ")\n    \n    # Store the response in the dictionary.\n    responses[name] = response\n    \n    # Find out if anyone else is going to take the poll.\n    repeat = input("Would you like to let another person respond? (yes/no) ")\n    if repeat == \'no\':\n        polling_active = False\n\n# Polling is complete. Show the results.\nprint("\\n--- Poll Results ---")\nfor name, response in responses.items():\n    print(f"{name} would like to climb {response}.")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"What is your name? Eric\nWhich mountain would you like to climb someday? Denali\nWould you like to let another person respond? (yes/no) yes\n\nWhat is your name? Lynn\nWhich mountain would you like to climb someday? Devil's Thumb\nWould you like to let another person respond? (yes/no) no\n\n--- Poll Results ---\nEric would like to climb Denali.\nLynn would like to climb Devil's Thumb.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"In this chapter you learned how to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"input()"})," to let users provide information"]}),"\n",(0,t.jsx)(n.li,{children:"Work with both text and numerical input"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"while"})," loops to keep programs running as long as certain conditions remain true"]}),"\n",(0,t.jsxs)(n.li,{children:["Control the flow of your ",(0,t.jsx)(n.code,{children:"while"})," loops using flags, the ",(0,t.jsx)(n.code,{children:"break"})," statement, and the ",(0,t.jsx)(n.code,{children:"continue"})," statement"]}),"\n",(0,t.jsxs)(n.li,{children:["Move items between lists using ",(0,t.jsx)(n.code,{children:"while"})," loops"]}),"\n",(0,t.jsx)(n.li,{children:"Remove all instances of a value from a list"}),"\n",(0,t.jsx)(n.li,{children:"Fill dictionaries with user input"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Knowing how to process user input and control how long your programs run will help you write fully interactive programs."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);