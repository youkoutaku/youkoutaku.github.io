"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[78090],{8:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/functions","title":"Functions","description":"Writing reusable code with functions and organizing your programs","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/08-functions.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/functions","permalink":"/docs/programming-and-tools/languages/python/crash-course/functions","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/08-functions.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Functions","description":"Writing reusable code with functions and organizing your programs","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"User Input and while Loops","permalink":"/docs/programming-and-tools/languages/python/crash-course/user-input-while-loops"},"next":{"title":"Classes","permalink":"/docs/programming-and-tools/languages/python/crash-course/classes"}}');var t=i(74848),r=i(28453);const s={title:"Functions",description:"Writing reusable code with functions and organizing your programs",sidebar_position:8},o="Functions",l={},d=[{value:"Defining a Function",id:"defining-a-function",level:2},{value:"Information to a Function",id:"information-to-a-function",level:3},{value:"Passing Arguments",id:"passing-arguments",level:2},{value:"Positional Arguments",id:"positional-arguments",level:3},{value:"Order Matters in Positional Arguments",id:"order-matters-in-positional-arguments",level:4},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Avoiding Argument Errors",id:"avoiding-argument-errors",level:3},{value:"Return Values",id:"return-values",level:2},{value:"Returning a Simple Value",id:"returning-a-simple-value",level:3},{value:"Making an Argument Optional",id:"making-an-argument-optional",level:3},{value:"Returning a Dictionary",id:"returning-a-dictionary",level:3},{value:"Using a Function with a while Loop",id:"using-a-function-with-a-while-loop",level:3},{value:"Passing a List",id:"passing-a-list",level:2},{value:"Modifying a List in a Function",id:"modifying-a-list-in-a-function",level:3},{value:"Preventing a Function from Modifying a List",id:"preventing-a-function-from-modifying-a-list",level:3},{value:"Passing an Arbitrary Number of Arguments",id:"passing-an-arbitrary-number-of-arguments",level:2},{value:"Mixing Positional and Arbitrary Arguments",id:"mixing-positional-and-arbitrary-arguments",level:3},{value:"Using Arbitrary Keyword Arguments",id:"using-arbitrary-keyword-arguments",level:3},{value:"Storing Functions in Modules",id:"storing-functions-in-modules",level:2},{value:"Importing an Entire Module",id:"importing-an-entire-module",level:3},{value:"Importing Specific Functions",id:"importing-specific-functions",level:3},{value:"Using as to Give a Function an Alias",id:"using-as-to-give-a-function-an-alias",level:3},{value:"Using as to Give a Module an Alias",id:"using-as-to-give-a-module-an-alias",level:3},{value:"Importing All Functions in a Module",id:"importing-all-functions-in-a-module",level:3},{value:"Styling Functions",id:"styling-functions",level:2},{value:"Summary",id:"summary",level:2}];function c(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"functions",children:"Functions"})}),"\n",(0,t.jsxs)(e.p,{children:["In this chapter you'll learn to write ",(0,t.jsx)(e.strong,{children:"functions"}),", which are named blocks of code that are designed to do one specific job. When you want to perform a particular task that you've defined in a function, you ",(0,t.jsx)(e.strong,{children:"call"})," the name of the function responsible for it."]}),"\n",(0,t.jsx)(e.h2,{id:"defining-a-function",children:"Defining a Function"}),"\n",(0,t.jsxs)(e.p,{children:["Here's a simple function named ",(0,t.jsx)(e.code,{children:"greet_user()"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def greet_user():\n    """Display a simple greeting."""\n    print("Hello!")\n\ngreet_user()\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Hello!\n"})}),"\n",(0,t.jsx)(e.h3,{id:"information-to-a-function",children:"Information to a Function"}),"\n",(0,t.jsxs)(e.p,{children:["The function ",(0,t.jsx)(e.code,{children:"greet_user()"})," can be modified to accept a ",(0,t.jsx)(e.strong,{children:"parameter"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def greet_user(username):\n    """Display a simple greeting."""\n    print(f"Hello, {username.title()}!")\n\ngreet_user(\'jesse\')\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Hello, Jesse!\n"})}),"\n",(0,t.jsx)(e.admonition,{title:"Parameters vs Arguments",type:"note",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["A ",(0,t.jsx)(e.strong,{children:"parameter"})," is a variable used in a function definition (like ",(0,t.jsx)(e.code,{children:"username"}),")"]}),"\n",(0,t.jsxs)(e.li,{children:["An ",(0,t.jsx)(e.strong,{children:"argument"})," is a value that's passed to a function when it's called (like ",(0,t.jsx)(e.code,{children:"'jesse'"}),")"]}),"\n"]})}),"\n",(0,t.jsx)(e.h2,{id:"passing-arguments",children:"Passing Arguments"}),"\n",(0,t.jsx)(e.p,{children:"Because a function definition can have multiple parameters, a function call may need multiple arguments."}),"\n",(0,t.jsx)(e.h3,{id:"positional-arguments",children:"Positional Arguments"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def describe_pet(animal_type, pet_name):\n    """Display information about a pet."""\n    print(f"\\nI have a {animal_type}.")\n    print(f"My {animal_type}\'s name is {pet_name.title()}.")\n\ndescribe_pet(\'hamster\', \'harry\')\ndescribe_pet(\'dog\', \'willie\')\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"I have a hamster.\nMy hamster's name is Harry.\n\nI have a dog.\nMy dog's name is Willie.\n"})}),"\n",(0,t.jsx)(e.h4,{id:"order-matters-in-positional-arguments",children:"Order Matters in Positional Arguments"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"describe_pet('harry', 'hamster')\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"I have a harry.\nMy harry's name is Hamster.\n"})}),"\n",(0,t.jsx)(e.h3,{id:"keyword-arguments",children:"Keyword Arguments"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"keyword argument"})," is a name-value pair that you pass to a function:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet(animal_type='hamster', pet_name='harry')\ndescribe_pet(pet_name='harry', animal_type='hamster')  # Order doesn't matter\n"})}),"\n",(0,t.jsx)(e.h3,{id:"default-values",children:"Default Values"}),"\n",(0,t.jsxs)(e.p,{children:["You can define a ",(0,t.jsx)(e.strong,{children:"default value"})," for each parameter:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def describe_pet(pet_name, animal_type='dog'):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\n# A dog named Willie\ndescribe_pet(pet_name='willie')\ndescribe_pet('willie')\n\n# A hamster named Harry\ndescribe_pet(pet_name='harry', animal_type='hamster')\ndescribe_pet('harry', 'hamster')\ndescribe_pet(animal_type='hamster', pet_name='harry')\n"})}),"\n",(0,t.jsx)(e.admonition,{title:"Default Value Order",type:"warning",children:(0,t.jsx)(e.p,{children:"When you use default values, any parameter with a default value needs to be listed after all the parameters that don't have default values."})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# This will cause a SyntaxError\ndef describe_pet(animal_type='dog', pet_name):  # Wrong!\n    pass\n"})}),"\n",(0,t.jsx)(e.h3,{id:"avoiding-argument-errors",children:"Avoiding Argument Errors"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def describe_pet(pet_name, animal_type=\'dog\'):\n    """Display information about a pet."""\n    print(f"\\nI have a {animal_type}.")\n    print(f"My {animal_type}\'s name is {pet_name.title()}.")\n\ndescribe_pet()  # TypeError: missing 1 required positional argument\n'})}),"\n",(0,t.jsx)(e.h2,{id:"return-values",children:"Return Values"}),"\n",(0,t.jsx)(e.p,{children:"A function doesn't always have to display its output directly. Instead, it can process data and then return a value or set of values."}),"\n",(0,t.jsx)(e.h3,{id:"returning-a-simple-value",children:"Returning a Simple Value"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def get_formatted_name(first_name, last_name):\n    """Return a full name, neatly formatted."""\n    full_name = f"{first_name} {last_name}"\n    return full_name.title()\n\nmusician = get_formatted_name(\'jimi\', \'hendrix\')\nprint(musician)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Jimi Hendrix\n"})}),"\n",(0,t.jsx)(e.h3,{id:"making-an-argument-optional",children:"Making an Argument Optional"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def get_formatted_name(first_name, last_name, middle_name=''):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    if middle_name:\n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else:\n        full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n\nmusician = get_formatted_name('john', 'hooker', 'lee')\nprint(musician)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Jimi Hendrix\nJohn Lee Hooker\n"})}),"\n",(0,t.jsx)(e.h3,{id:"returning-a-dictionary",children:"Returning a Dictionary"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def build_person(first_name, last_name):\n    \"\"\"Return a dictionary of information about a person.\"\"\"\n    person = {'first': first_name, 'last': last_name}\n    return person\n\nmusician = build_person('jimi', 'hendrix')\nprint(musician)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"{'first': 'jimi', 'last': 'hendrix'}\n"})}),"\n",(0,t.jsx)(e.p,{children:"You can easily extend this function to accept optional values:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def build_person(first_name, last_name, age=None):\n    \"\"\"Return a dictionary of information about a person.\"\"\"\n    person = {'first': first_name, 'last': last_name}\n    if age:\n        person['age'] = age\n    return person\n\nmusician = build_person('jimi', 'hendrix', age=27)\nprint(musician)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"{'first': 'jimi', 'last': 'hendrix', 'age': 27}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"using-a-function-with-a-while-loop",children:"Using a Function with a while Loop"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def get_formatted_name(first_name, last_name):\n    """Return a full name, neatly formatted."""\n    full_name = f"{first_name} {last_name}"\n    return full_name.title()\n\nwhile True:\n    print("\\nPlease tell me your name:")\n    print("(enter \'q\' at any time to quit)")\n    \n    f_name = input("First name: ")\n    if f_name == \'q\':\n        break\n        \n    l_name = input("Last name: ")\n    if l_name == \'q\':\n        break\n    \n    formatted_name = get_formatted_name(f_name, l_name)\n    print(f"\\nHello, {formatted_name}!")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"passing-a-list",children:"Passing a List"}),"\n",(0,t.jsx)(e.p,{children:"You'll often find it useful to pass a list to a function:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def greet_users(names):\n    """Print a simple greeting to each user in the list."""\n    for name in names:\n        msg = f"Hello, {name.title()}!"\n        print(msg)\n\nusernames = [\'hannah\', \'ty\', \'margot\']\ngreet_users(usernames)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Hello, Hannah!\nHello, Ty!\nHello, Margot!\n"})}),"\n",(0,t.jsx)(e.h3,{id:"modifying-a-list-in-a-function",children:"Modifying a List in a Function"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def print_models(unprinted_designs, completed_models):\n    """\n    Simulate printing each design, until none are left.\n    Move each design to completed_models after printing.\n    """\n    while unprinted_designs:\n        current_design = unprinted_designs.pop()\n        print(f"Printing model: {current_design}")\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n    """Show all the models that were printed."""\n    print("\\nThe following models have been printed:")\n    for completed_model in completed_models:\n        print(completed_model)\n\nunprinted_designs = [\'phone case\', \'robot pendant\', \'dodecahedron\']\ncompleted_models = []\n\nprint_models(unprinted_designs, completed_models)\nshow_completed_models(completed_models)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"preventing-a-function-from-modifying-a-list",children:"Preventing a Function from Modifying a List"}),"\n",(0,t.jsx)(e.p,{children:"Sometimes you'll want to prevent a function from modifying a list. You can send a copy of a list to a function like this:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print_models(unprinted_designs[:], completed_models)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The slice notation ",(0,t.jsx)(e.code,{children:"[:]"})," makes a copy of the list to send to the function."]}),"\n",(0,t.jsx)(e.h2,{id:"passing-an-arbitrary-number-of-arguments",children:"Passing an Arbitrary Number of Arguments"}),"\n",(0,t.jsx)(e.p,{children:"Sometimes you won't know ahead of time how many arguments a function needs to accept."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def make_pizza(*toppings):\n    """Summarize the pizza we are about to make."""\n    print("\\nMaking a pizza with the following toppings:")\n    for topping in toppings:\n        print(f"- {topping}")\n\nmake_pizza(\'pepperoni\')\nmake_pizza(\'mushrooms\', \'green peppers\', \'extra cheese\')\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Making a pizza with the following toppings:\n- pepperoni\n\nMaking a pizza with the following toppings:\n- mushrooms\n- green peppers\n- extra cheese\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The asterisk in the parameter name ",(0,t.jsx)(e.code,{children:"*toppings"})," tells Python to make an empty tuple called ",(0,t.jsx)(e.code,{children:"toppings"})," and pack whatever values it receives into this tuple."]}),"\n",(0,t.jsx)(e.h3,{id:"mixing-positional-and-arbitrary-arguments",children:"Mixing Positional and Arbitrary Arguments"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def make_pizza(size, *toppings):\n    """Summarize the pizza we are about to make."""\n    print(f"\\nMaking a {size}-inch pizza with the following toppings:")\n    for topping in toppings:\n        print(f"- {topping}")\n\nmake_pizza(16, \'pepperoni\')\nmake_pizza(12, \'mushrooms\', \'green peppers\', \'extra cheese\')\n'})}),"\n",(0,t.jsx)(e.h3,{id:"using-arbitrary-keyword-arguments",children:"Using Arbitrary Keyword Arguments"}),"\n",(0,t.jsx)(e.p,{children:"Sometimes you'll want to accept an arbitrary number of arguments, but you won't know ahead of time what kind of information will be passed to the function:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def build_profile(first, last, **user_info):\n    \"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('albert', 'einstein',\n                           location='princeton',\n                           field='physics')\nprint(user_profile)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"{'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The double asterisks before the parameter ",(0,t.jsx)(e.code,{children:"**user_info"})," cause Python to create an empty dictionary called ",(0,t.jsx)(e.code,{children:"user_info"})," and pack whatever name-value pairs it receives into this dictionary."]}),"\n",(0,t.jsx)(e.h2,{id:"storing-functions-in-modules",children:"Storing Functions in Modules"}),"\n",(0,t.jsxs)(e.p,{children:["One advantage of functions is the way they separate blocks of code from your main program. You can go a step further by storing your functions in a separate file called a ",(0,t.jsx)(e.strong,{children:"module"})," and then ",(0,t.jsx)(e.strong,{children:"importing"})," that module into your main program."]}),"\n",(0,t.jsx)(e.h3,{id:"importing-an-entire-module",children:"Importing an Entire Module"}),"\n",(0,t.jsxs)(e.p,{children:["Create a file called ",(0,t.jsx)(e.code,{children:"pizza.py"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# pizza.py\ndef make_pizza(size, *toppings):\n    """Summarize the pizza we are about to make."""\n    print(f"\\nMaking a {size}-inch pizza with the following toppings:")\n    for topping in toppings:\n        print(f"- {topping}")\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Now create another file in the same directory called ",(0,t.jsx)(e.code,{children:"making_pizzas.py"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# making_pizzas.py\nimport pizza\n\npizza.make_pizza(16, 'pepperoni')\npizza.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')\n"})}),"\n",(0,t.jsx)(e.h3,{id:"importing-specific-functions",children:"Importing Specific Functions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from pizza import make_pizza\n\nmake_pizza(16, 'pepperoni')\nmake_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')\n"})}),"\n",(0,t.jsx)(e.h3,{id:"using-as-to-give-a-function-an-alias",children:"Using as to Give a Function an Alias"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from pizza import make_pizza as mp\n\nmp(16, 'pepperoni')\nmp(12, 'mushrooms', 'green peppers', 'extra cheese')\n"})}),"\n",(0,t.jsx)(e.h3,{id:"using-as-to-give-a-module-an-alias",children:"Using as to Give a Module an Alias"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pizza as p\n\np.make_pizza(16, 'pepperoni')\np.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')\n"})}),"\n",(0,t.jsx)(e.h3,{id:"importing-all-functions-in-a-module",children:"Importing All Functions in a Module"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from pizza import *\n\nmake_pizza(16, 'pepperoni')\nmake_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsx)(e.p,{children:"It's best to avoid this approach when you're working on projects of your own. Python may see several functions or variables with the same name, and instead of importing all the functions separately, it will overwrite the functions."})}),"\n",(0,t.jsx)(e.h2,{id:"styling-functions",children:"Styling Functions"}),"\n",(0,t.jsx)(e.p,{children:"Functions should have descriptive names, and these names should use lowercase letters and underscores. Descriptive names help you and others understand what your code is trying to do."}),"\n",(0,t.jsx)(e.p,{children:"Every function should have a comment that explains concisely what the function does. This comment should appear immediately after the function definition and use the docstring format."}),"\n",(0,t.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(e.p,{children:"In this chapter you learned how to:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Define functions using the ",(0,t.jsx)(e.code,{children:"def"})," statement"]}),"\n",(0,t.jsx)(e.li,{children:"Pass information to functions using parameters and arguments"}),"\n",(0,t.jsx)(e.li,{children:"Use positional arguments, keyword arguments, and default values"}),"\n",(0,t.jsx)(e.li,{children:"Return values from functions"}),"\n",(0,t.jsx)(e.li,{children:"Use functions with lists and dictionaries"}),"\n",(0,t.jsxs)(e.li,{children:["Accept a variable number of arguments using ",(0,t.jsx)(e.code,{children:"*args"})," and ",(0,t.jsx)(e.code,{children:"**kwargs"})]}),"\n",(0,t.jsx)(e.li,{children:"Store functions in modules and import them"}),"\n",(0,t.jsx)(e.li,{children:"Style your functions according to Python conventions"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Functions are essential for writing clean, organized, and reusable code. As your programs become more complex, functions will help you organize your code and make it easier to maintain and debug."})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>o});var a=i(96540);const t={},r=a.createContext(t);function s(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);