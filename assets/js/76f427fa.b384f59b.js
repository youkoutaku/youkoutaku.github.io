"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[29368],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var s=a(96540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},85075:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/classes","title":"Classes","description":"Creating and using classes to model real-world objects","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/09-classes.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/classes","permalink":"/docs/programming-and-tools/languages/python/crash-course/classes","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/09-classes.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Classes","description":"Creating and using classes to model real-world objects","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/docs/programming-and-tools/languages/python/crash-course/functions"},"next":{"title":"Files and Exceptions","permalink":"/docs/programming-and-tools/languages/python/crash-course/files-exceptions"}}');var t=a(74848),i=a(28453);const r={title:"Classes",description:"Creating and using classes to model real-world objects",sidebar_position:9},l="Classes",o={},d=[{value:"Creating and Using a Class",id:"creating-and-using-a-class",level:2},{value:"Creating the Dog Class",id:"creating-the-dog-class",level:3},{value:"The <code>__init__()</code> Method",id:"the-__init__-method",level:4},{value:"Making an Instance from a Class",id:"making-an-instance-from-a-class",level:3},{value:"Calling Methods",id:"calling-methods",level:4},{value:"Creating Multiple Instances",id:"creating-multiple-instances",level:4},{value:"Working with Classes and Instances",id:"working-with-classes-and-instances",level:2},{value:"The Car Class",id:"the-car-class",level:3},{value:"Setting a Default Value for an Attribute",id:"setting-a-default-value-for-an-attribute",level:3},{value:"Modifying Attribute Values",id:"modifying-attribute-values",level:3},{value:"Modifying an Attribute&#39;s Value Directly",id:"modifying-an-attributes-value-directly",level:4},{value:"Modifying an Attribute&#39;s Value Through a Method",id:"modifying-an-attributes-value-through-a-method",level:4},{value:"Incrementing an Attribute&#39;s Value Through a Method",id:"incrementing-an-attributes-value-through-a-method",level:4},{value:"Inheritance",id:"inheritance",level:2},{value:"The <code>__init__()</code> Method for a Child Class",id:"the-__init__-method-for-a-child-class",level:3},{value:"Defining Attributes and Methods for the Child Class",id:"defining-attributes-and-methods-for-the-child-class",level:3},{value:"Overriding Methods from the Parent Class",id:"overriding-methods-from-the-parent-class",level:3},{value:"Instances as Attributes",id:"instances-as-attributes",level:3},{value:"Importing Classes",id:"importing-classes",level:2},{value:"Importing a Single Class",id:"importing-a-single-class",level:3},{value:"Storing Multiple Classes in a Module",id:"storing-multiple-classes-in-a-module",level:3},{value:"Importing Multiple Classes from a Module",id:"importing-multiple-classes-from-a-module",level:3},{value:"Importing an Entire Module",id:"importing-an-entire-module",level:3},{value:"Importing All Classes from a Module",id:"importing-all-classes-from-a-module",level:3},{value:"The Python Standard Library",id:"the-python-standard-library",level:2},{value:"Styling Classes",id:"styling-classes",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"classes",children:"Classes"})}),"\n",(0,t.jsxs)(n.p,{children:["Object-oriented programming is one of the most effective approaches to writing software. In object-oriented programming, you write ",(0,t.jsx)(n.strong,{children:"classes"})," that represent real-world things and situations, and you create ",(0,t.jsx)(n.strong,{children:"objects"})," based on these classes."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-and-using-a-class",children:"Creating and Using a Class"}),"\n",(0,t.jsx)(n.h3,{id:"creating-the-dog-class",children:"Creating the Dog Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Dog:\n    """A simple attempt to model a dog."""\n\n    def __init__(self, name, age):\n        """Initialize name and age attributes."""\n        self.name = name\n        self.age = age\n\n    def sit(self):\n        """Simulate a dog sitting in response to a command."""\n        print(f"{self.name} is now sitting.")\n\n    def roll_over(self):\n        """Simulate rolling over in response to a command."""\n        print(f"{self.name} rolled over!")\n'})}),"\n",(0,t.jsx)(n.admonition,{title:"Class Naming Convention",type:"note",children:(0,t.jsx)(n.p,{children:"By convention, capitalized names refer to classes in Python. There are no parentheses in the class definition because we're creating this class from scratch."})}),"\n",(0,t.jsxs)(n.h4,{id:"the-__init__-method",children:["The ",(0,t.jsx)(n.code,{children:"__init__()"})," Method"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"__init__()"})," method is a special method that Python runs automatically whenever we create a new instance from the class. The ",(0,t.jsx)(n.code,{children:"self"})," parameter is required in the method definition, and it must come first before the other parameters."]}),"\n",(0,t.jsxs)(n.p,{children:["Every method call associated with an instance automatically passes ",(0,t.jsx)(n.code,{children:"self"}),", which is a reference to the instance itself."]}),"\n",(0,t.jsx)(n.h3,{id:"making-an-instance-from-a-class",children:"Making an Instance from a Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Dog:\n    """A simple attempt to model a dog."""\n\n    def __init__(self, name, age):\n        """Initialize name and age attributes."""\n        self.name = name\n        self.age = age\n\n    def sit(self):\n        """Simulate a dog sitting in response to a command."""\n        print(f"{self.name} is now sitting.")\n\n    def roll_over(self):\n        """Simulate rolling over in response to a command."""\n        print(f"{self.name} rolled over!")\n\nmy_dog = Dog(\'Willie\', 6)\n\nprint(f"My dog\'s name is {my_dog.name}.")\nprint(f"My dog is {my_dog.age} years old.")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"My dog's name is Willie.\nMy dog is 6 years old.\n"})}),"\n",(0,t.jsx)(n.h4,{id:"calling-methods",children:"Calling Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_dog = Dog('Willie', 6)\nmy_dog.sit()\nmy_dog.roll_over()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Willie is now sitting.\nWillie rolled over!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"creating-multiple-instances",children:"Creating Multiple Instances"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_dog = Dog(\'Willie\', 6)\nyour_dog = Dog(\'Lucy\', 3)\n\nprint(f"My dog\'s name is {my_dog.name}.")\nprint(f"My dog is {my_dog.age} years old.")\nmy_dog.sit()\n\nprint(f"\\nYour dog\'s name is {your_dog.name}.")\nprint(f"Your dog is {your_dog.age} years old.")\nyour_dog.sit()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"working-with-classes-and-instances",children:"Working with Classes and Instances"}),"\n",(0,t.jsx)(n.h3,{id:"the-car-class",children:"The Car Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    """A simple attempt to represent a car."""\n\n    def __init__(self, make, model, year):\n        """Initialize attributes to describe a car."""\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_descriptive_name(self):\n        """Return a neatly formatted descriptive name."""\n        long_name = f"{self.year} {self.make} {self.model}"\n        return long_name.title()\n\nmy_new_car = Car(\'audi\', \'a4\', 2019)\nprint(my_new_car.get_descriptive_name())\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Audi A4\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-a-default-value-for-an-attribute",children:"Setting a Default Value for an Attribute"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    """A simple attempt to represent a car."""\n\n    def __init__(self, make, model, year):\n        """Initialize attributes to describe a car."""\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        """Return a neatly formatted descriptive name."""\n        long_name = f"{self.year} {self.make} {self.model}"\n        return long_name.title()\n\n    def read_odometer(self):\n        """Print a statement showing the car\'s mileage."""\n        print(f"This car has {self.odometer_reading} miles on it.")\n\nmy_new_car = Car(\'audi\', \'a4\', 2019)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.read_odometer()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Audi A4\nThis car has 0 miles on it.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"modifying-attribute-values",children:"Modifying Attribute Values"}),"\n",(0,t.jsx)(n.h4,{id:"modifying-an-attributes-value-directly",children:"Modifying an Attribute's Value Directly"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Audi A4\nThis car has 23 miles on it.\n"})}),"\n",(0,t.jsx)(n.h4,{id:"modifying-an-attributes-value-through-a-method",children:"Modifying an Attribute's Value Through a Method"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    # ... (previous methods)\n\n    def update_odometer(self, mileage):\n        """Set the odometer reading to the given value."""\n        self.odometer_reading = mileage\n\nmy_new_car = Car(\'audi\', \'a4\', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can extend this method to do additional work every time the odometer reading is modified:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def update_odometer(self, mileage):\n    """\n    Set the odometer reading to the given value.\n    Reject the change if it attempts to roll the odometer back.\n    """\n    if mileage >= self.odometer_reading:\n        self.odometer_reading = mileage\n    else:\n        print("You can\'t roll back an odometer!")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"incrementing-an-attributes-value-through-a-method",children:"Incrementing an Attribute's Value Through a Method"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    # ... (previous methods)\n\n    def increment_odometer(self, miles):\n        """Add the given amount to the odometer reading."""\n        self.odometer_reading += miles\n\nmy_new_car = Car(\'audi\', \'a4\', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23_500)\nmy_new_car.read_odometer()\n\nmy_new_car.increment_odometer(100)\nmy_new_car.read_odometer()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Audi A4\nThis car has 23500 miles on it.\nThis car has 23600 miles on it.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,t.jsxs)(n.p,{children:["You don't always have to start from scratch when writing a class. If the class you're writing is a specialized version of another class you wrote, you can use ",(0,t.jsx)(n.strong,{children:"inheritance"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"the-__init__-method-for-a-child-class",children:["The ",(0,t.jsx)(n.code,{children:"__init__()"})," Method for a Child Class"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    """A simple attempt to represent a car."""\n\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        long_name = f"{self.year} {self.make} {self.model}"\n        return long_name.title()\n\n    def read_odometer(self):\n        print(f"This car has {self.odometer_reading} miles on it.")\n\n    def update_odometer(self, mileage):\n        if mileage >= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print("You can\'t roll back an odometer!")\n\n    def increment_odometer(self, miles):\n        self.odometer_reading += miles\n\nclass ElectricCar(Car):\n    """Represent aspects of a car, specific to electric vehicles."""\n\n    def __init__(self, make, model, year):\n        """Initialize attributes of the parent class."""\n        super().__init__(make, model, year)\n\nmy_tesla = ElectricCar(\'tesla\', \'model s\', 2019)\nprint(my_tesla.get_descriptive_name())\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Tesla Model S\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"super()"})," function is a special function that allows you to call a method from the parent class."]}),"\n",(0,t.jsx)(n.h3,{id:"defining-attributes-and-methods-for-the-child-class",children:"Defining Attributes and Methods for the Child Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class ElectricCar(Car):\n    """Represent aspects of a car, specific to electric vehicles."""\n\n    def __init__(self, make, model, year):\n        """\n        Initialize attributes of the parent class.\n        Then initialize attributes specific to an electric car.\n        """\n        super().__init__(make, model, year)\n        self.battery_size = 75\n\n    def describe_battery(self):\n        """Print a statement describing the battery size."""\n        print(f"This car has a {self.battery_size}-kWh battery.")\n\nmy_tesla = ElectricCar(\'tesla\', \'model s\', 2019)\nprint(my_tesla.get_descriptive_name())\nmy_tesla.describe_battery()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Tesla Model S\nThis car has a 75-kWh battery.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"overriding-methods-from-the-parent-class",children:"Overriding Methods from the Parent Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class ElectricCar(Car):\n    # ... (previous methods)\n\n    def fill_gas_tank(self):\n        """Electric cars don\'t have gas tanks."""\n        print("This car doesn\'t need a gas tank!")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When someone tries to call ",(0,t.jsx)(n.code,{children:"fill_gas_tank()"})," with an electric car, Python will ignore the method in ",(0,t.jsx)(n.code,{children:"Car"})," and run this method instead."]}),"\n",(0,t.jsx)(n.h3,{id:"instances-as-attributes",children:"Instances as Attributes"}),"\n",(0,t.jsx)(n.p,{children:"When modeling something from the real world in code, you may find that you're adding more and more detail to a class. You might find that you have a growing list of attributes and methods and that your files are becoming lengthy. In situations like this, you might recognize that part of one class can be written as a separate class."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Battery:\n    """A simple attempt to model a battery for an electric car."""\n\n    def __init__(self, battery_size=75):\n        """Initialize the battery\'s attributes."""\n        self.battery_size = battery_size\n\n    def describe_battery(self):\n        """Print a statement describing the battery size."""\n        print(f"This car has a {self.battery_size}-kWh battery.")\n\n    def get_range(self):\n        """Print a statement about the range this battery provides."""\n        if self.battery_size == 75:\n            range = 260\n        elif self.battery_size == 100:\n            range = 315\n\n        print(f"This car can go about {range} miles on a full charge.")\n\nclass ElectricCar(Car):\n    """Represent aspects of a car, specific to electric vehicles."""\n\n    def __init__(self, make, model, year):\n        """\n        Initialize attributes of the parent class.\n        Then initialize attributes specific to an electric car.\n        """\n        super().__init__(make, model, year)\n        self.battery = Battery()\n\nmy_tesla = ElectricCar(\'tesla\', \'model s\', 2019)\nprint(my_tesla.get_descriptive_name())\nmy_tesla.battery.describe_battery()\nmy_tesla.battery.get_range()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019 Tesla Model S\nThis car has a 75-kWh battery.\nThis car can go about 260 miles on a full charge.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"importing-classes",children:"Importing Classes"}),"\n",(0,t.jsx)(n.h3,{id:"importing-a-single-class",children:"Importing a Single Class"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file called ",(0,t.jsx)(n.code,{children:"car.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# car.py\n"""A class that can be used to represent a car."""\n\nclass Car:\n    """A simple attempt to represent a car."""\n\n    def __init__(self, make, model, year):\n        """Initialize attributes to describe a car."""\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        """Return a neatly formatted descriptive name."""\n        long_name = f"{self.year} {self.make} {self.model}"\n        return long_name.title()\n\n    def read_odometer(self):\n        """Print a statement showing the car\'s mileage."""\n        print(f"This car has {self.odometer_reading} miles on it.")\n\n    def update_odometer(self, mileage):\n        """Set the odometer reading to the given value."""\n        if mileage >= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print("You can\'t roll back an odometer!")\n\n    def increment_odometer(self, miles):\n        """Add the given amount to the odometer reading."""\n        self.odometer_reading += miles\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can import the ",(0,t.jsx)(n.code,{children:"Car"})," class and use it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# my_car.py\nfrom car import Car\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"storing-multiple-classes-in-a-module",children:"Storing Multiple Classes in a Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# car.py\n"""A set of classes used to represent gas and electric cars."""\n\nclass Car:\n    # ... (Car class definition)\n\nclass Battery:\n    # ... (Battery class definition)\n\nclass ElectricCar(Car):\n    # ... (ElectricCar class definition)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"importing-multiple-classes-from-a-module",children:"Importing Multiple Classes from a Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from car import Car, ElectricCar\n\nmy_beetle = Car('volkswagen', 'beetle', 2019)\nprint(my_beetle.get_descriptive_name())\n\nmy_tesla = ElectricCar('tesla', 'roadster', 2019)\nprint(my_tesla.get_descriptive_name())\n"})}),"\n",(0,t.jsx)(n.h3,{id:"importing-an-entire-module",children:"Importing an Entire Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import car\n\nmy_beetle = car.Car('volkswagen', 'beetle', 2019)\nprint(my_beetle.get_descriptive_name())\n\nmy_tesla = car.ElectricCar('tesla', 'roadster', 2019)\nprint(my_tesla.get_descriptive_name())\n"})}),"\n",(0,t.jsx)(n.h3,{id:"importing-all-classes-from-a-module",children:"Importing All Classes from a Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from car import *\n\nmy_beetle = Car('volkswagen', 'beetle', 2019)\nprint(my_beetle.get_descriptive_name())\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"This approach is not recommended. It's unclear which classes you're using from the module, and this approach can lead to confusion with names in the file."})}),"\n",(0,t.jsx)(n.h2,{id:"the-python-standard-library",children:"The Python Standard Library"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Python Standard Library"})," is a set of modules included with every Python installation. You can use any function or class in the standard library by including a simple ",(0,t.jsx)(n.code,{children:"import"})," statement at the top of your file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from random import randint, choice\n\n# Generate random numbers\nprint(randint(1, 6))\n\n# Choose random items from a list\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nfirst_up = choice(players)\nprint(first_up)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"styling-classes",children:"Styling Classes"}),"\n",(0,t.jsx)(n.p,{children:"A few styling issues related to classes are worth clarifying:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Class names should be written in ",(0,t.jsx)(n.strong,{children:"CamelCase"})]}),"\n",(0,t.jsxs)(n.li,{children:["Instance and module names should be written in ",(0,t.jsx)(n.strong,{children:"lowercase"})," with underscores between words"]}),"\n",(0,t.jsx)(n.li,{children:"Every class should have a docstring immediately following the class definition"}),"\n",(0,t.jsx)(n.li,{children:"Each module should also have a docstring describing what the classes in a module can be used for"}),"\n",(0,t.jsx)(n.li,{children:"You can use blank lines to organize code, but don't use them excessively"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"In this chapter you learned how to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Write your own classes"}),"\n",(0,t.jsx)(n.li,{children:"Store information in a class using attributes and represent behaviors with methods"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"__init__()"})," methods to create instances from your classes with exactly the attributes you want"]}),"\n",(0,t.jsx)(n.li,{children:"Modify the attributes of an instance directly and through methods"}),"\n",(0,t.jsx)(n.li,{children:"Use inheritance to create classes that extend the functionality of existing classes"}),"\n",(0,t.jsx)(n.li,{children:"Use instances of one class as attributes in another class to keep each class simple"}),"\n",(0,t.jsx)(n.li,{children:"Store your classes in modules and import classes written by other programmers"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Learning to write classes will help you model almost anything you want to build in your programs. As you work through the remaining chapters, you'll use classes to power your games and visualizations."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);