"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8804],{11763:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/working-with-lists","title":"Working with Lists","description":"Using loops, ranges, and slicing to work efficiently with lists","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/04-working-with-lists.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/working-with-lists","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/working-with-lists","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/04-working-with-lists.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Working with Lists","description":"Using loops, ranges, and slicing to work efficiently with lists","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Lists","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/lists"},"next":{"title":"If Statements","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/if-statements"}}');var t=i(74848),r=i(28453);const o={title:"Working with Lists",description:"Using loops, ranges, and slicing to work efficiently with lists",sidebar_position:4},l="Working with Lists",a={},c=[{value:"Looping Through Lists",id:"looping-through-lists",level:2},{value:"Basic For Loop",id:"basic-for-loop",level:3},{value:"Doing More Work Within a For Loop",id:"doing-more-work-within-a-for-loop",level:3},{value:"Common For Loop Mistakes",id:"common-for-loop-mistakes",level:2},{value:"Forgetting the Colon",id:"forgetting-the-colon",level:3},{value:"Indentation Errors",id:"indentation-errors",level:3},{value:"Making Numerical Lists",id:"making-numerical-lists",level:2},{value:"Using the range() Function",id:"using-the-range-function",level:3},{value:"Using range() to Make a List of Numbers",id:"using-range-to-make-a-list-of-numbers",level:3},{value:"Creating Lists with Loops",id:"creating-lists-with-loops",level:3},{value:"Simple Statistics with Lists",id:"simple-statistics-with-lists",level:3},{value:"List Comprehensions",id:"list-comprehensions",level:3},{value:"Working with Part of a List",id:"working-with-part-of-a-list",level:2},{value:"Slicing a List",id:"slicing-a-list",level:3},{value:"Slice Variations",id:"slice-variations",level:4},{value:"Looping Through a Slice",id:"looping-through-a-slice",level:3},{value:"Copying a List",id:"copying-a-list",level:3},{value:"Tuples",id:"tuples",level:2},{value:"Defining a Tuple",id:"defining-a-tuple",level:3},{value:"Tuples are Immutable",id:"tuples-are-immutable",level:3},{value:"Looping Through a Tuple",id:"looping-through-a-tuple",level:3},{value:"Writing Over a Tuple",id:"writing-over-a-tuple",level:3},{value:"Code Formatting Guidelines (PEP 8)",id:"code-formatting-guidelines-pep-8",level:2},{value:"Indentation",id:"indentation",level:3},{value:"Line Length",id:"line-length",level:3},{value:"Blank Lines",id:"blank-lines",level:3},{value:"Summary",id:"summary",level:2}];function h(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"working-with-lists",children:"Working with Lists"})}),"\n",(0,t.jsx)(e.p,{children:"In this chapter, you'll learn how to loop through an entire list using just a few lines of code regardless of how long the list is. Looping allows you to take the same action with every item in a list, whether it's printing out each name in a list of people or performing the same statistical calculation on every element in a list of numbers."}),"\n",(0,t.jsx)(e.h2,{id:"looping-through-lists",children:"Looping Through Lists"}),"\n",(0,t.jsxs)(e.p,{children:["You'll often want to run through all entries in a list, performing the same task with each item. Python's ",(0,t.jsx)(e.code,{children:"for"})," loop makes this easy."]}),"\n",(0,t.jsx)(e.h3,{id:"basic-for-loop",children:"Basic For Loop"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Loop through a list\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(magician)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"alice\ndavid\ncarolina\n"})}),"\n",(0,t.jsx)(e.h3,{id:"doing-more-work-within-a-for-loop",children:"Doing More Work Within a For Loop"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# More detailed output in a loop\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f'{magician.title()}, that was a great trick.')\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\nprint(\"Thank you, everyone. That was a great magic show!\")\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Alice, that was a great trick.\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick.\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick.\nI can't wait to see your next trick, Carolina.\n\nThank you, everyone. That was a great magic show!\n"})}),"\n",(0,t.jsx)(e.h2,{id:"common-for-loop-mistakes",children:"Common For Loop Mistakes"}),"\n",(0,t.jsx)(e.h3,{id:"forgetting-the-colon",children:"Forgetting the Colon"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# This will cause a syntax error\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians  # Missing colon\n    print(magician)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"indentation-errors",children:"Indentation Errors"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# This will cause an indentation error\nmessage = 'Hello'\n    print(message)  # Unexpected indent\n"})}),"\n",(0,t.jsx)(e.h2,{id:"making-numerical-lists",children:"Making Numerical Lists"}),"\n",(0,t.jsx)(e.p,{children:"Lists are ideal for storing sets of numbers, and Python provides several tools to help you work with lists of numbers efficiently."}),"\n",(0,t.jsx)(e.h3,{id:"using-the-range-function",children:"Using the range() Function"}),"\n",(0,t.jsxs)(e.p,{children:["Python's ",(0,t.jsx)(e.code,{children:"range()"})," function makes it easy to generate a series of numbers:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Print numbers 1 through 4\nfor value in range(1, 5):\n    print(value)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"1\n2\n3\n4\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Note that ",(0,t.jsx)(e.code,{children:"range()"})," stops one number before the end value you specify."]}),"\n",(0,t.jsx)(e.h3,{id:"using-range-to-make-a-list-of-numbers",children:"Using range() to Make a List of Numbers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Create a list of numbers\nnumbers = list(range(1, 6))\nprint(numbers)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[1, 2, 3, 4, 5]\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You can also use ",(0,t.jsx)(e.code,{children:"range()"})," to create lists with specific patterns:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Even numbers from 2 to 10\neven_numbers = list(range(2, 11, 2))\nprint(even_numbers)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[2, 4, 6, 8, 10]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"creating-lists-with-loops",children:"Creating Lists with Loops"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Create a list of squares\nsquares = []\nfor value in range(1, 11):\n    squares.append(value**2)\nprint(squares)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"simple-statistics-with-lists",children:"Simple Statistics with Lists"}),"\n",(0,t.jsx)(e.p,{children:"Python provides several functions for mathematical statistics:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Statistical functions\ndigits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nprint(min(digits))  # 0\nprint(max(digits))  # 9\nprint(sum(digits))  # 45\n"})}),"\n",(0,t.jsx)(e.h3,{id:"list-comprehensions",children:"List Comprehensions"}),"\n",(0,t.jsx)(e.p,{children:"List comprehensions allow you to generate lists in just one line of code:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Create squares using list comprehension\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The syntax is: ",(0,t.jsx)(e.code,{children:"list_name = [expression for value in range()]"})]}),"\n",(0,t.jsx)(e.h2,{id:"working-with-part-of-a-list",children:"Working with Part of a List"}),"\n",(0,t.jsx)(e.h3,{id:"slicing-a-list",children:"Slicing a List"}),"\n",(0,t.jsx)(e.p,{children:"You can work with a specific group of items in a list using a slice:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Slice a list\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[0:3])  # First three elements\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"['charles', 'martina', 'michael']\n"})}),"\n",(0,t.jsx)(e.h4,{id:"slice-variations",children:"Slice Variations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"players = ['charles', 'martina', 'michael', 'florence', 'eli']\n\n# From beginning to index 4\nprint(players[:4])\n\n# From index 2 to end\nprint(players[2:])\n\n# Last three elements\nprint(players[-3:])\n\n# Every second element\nprint(players[::2])\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"['charles', 'martina', 'michael', 'florence']\n['michael', 'florence', 'eli']\n['michael', 'florence', 'eli']\n['charles', 'michael', 'eli']\n"})}),"\n",(0,t.jsx)(e.h3,{id:"looping-through-a-slice",children:"Looping Through a Slice"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Loop through part of a list\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(\"Here are the first three players on my team:\")\nfor player in players[:3]:\n    print(player.title())\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Here are the first three players on my team:\nCharles\nMartina\nMichael\n"})}),"\n",(0,t.jsx)(e.h3,{id:"copying-a-list",children:"Copying a List"}),"\n",(0,t.jsx)(e.p,{children:"To copy a list, you can make a slice that includes the entire original list:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Copy a list\nmy_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]  # Creates a copy\n\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsxs)(e.p,{children:["If you simply assign one list to another (",(0,t.jsx)(e.code,{children:"friend_foods = my_foods"}),"), you're not making a copy. Both variables point to the same list!"]})}),"\n",(0,t.jsx)(e.h2,{id:"tuples",children:"Tuples"}),"\n",(0,t.jsxs)(e.p,{children:["Lists work well for storing collections of items that can change throughout the life of a program. However, sometimes you'll want to create a list of items that cannot change. Python calls these immutable lists ",(0,t.jsx)(e.strong,{children:"tuples"}),"."]}),"\n",(0,t.jsx)(e.h3,{id:"defining-a-tuple",children:"Defining a Tuple"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Define a tuple\ndimensions = (200, 50)\nprint(dimensions[0])\nprint(dimensions[1])\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"200\n50\n"})}),"\n",(0,t.jsx)(e.h3,{id:"tuples-are-immutable",children:"Tuples are Immutable"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# This will cause an error\ndimensions = (200, 50)\ndimensions[0] = 250  # TypeError: 'tuple' object does not support item assignment\n"})}),"\n",(0,t.jsx)(e.h3,{id:"looping-through-a-tuple",children:"Looping Through a Tuple"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Loop through a tuple\ndimensions = (200, 50)\nfor dimension in dimensions:\n    print(dimension)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"200\n50\n"})}),"\n",(0,t.jsx)(e.h3,{id:"writing-over-a-tuple",children:"Writing Over a Tuple"}),"\n",(0,t.jsx)(e.p,{children:"Although you can't modify a tuple, you can assign a new value to a variable that represents a tuple:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# Reassign a tuple\ndimensions = (200, 50)\nprint("Original dimensions:")\nfor dimension in dimensions:\n    print(dimension)\n\ndimensions = (400, 100)\nprint("\\nModified dimensions:")\nfor dimension in dimensions:\n    print(dimension)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Original dimensions:\n200\n50\n\nModified dimensions:\n400\n100\n"})}),"\n",(0,t.jsx)(e.h2,{id:"code-formatting-guidelines-pep-8",children:"Code Formatting Guidelines (PEP 8)"}),"\n",(0,t.jsx)(e.p,{children:"Python Enhancement Proposal 8 (PEP 8) provides guidelines for formatting Python code:"}),"\n",(0,t.jsx)(e.h3,{id:"indentation",children:"Indentation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Use 4 spaces per indentation level"}),"\n",(0,t.jsx)(e.li,{children:"Don't mix tabs and spaces"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"line-length",children:"Line Length"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Limit lines to 79 characters maximum"}),"\n",(0,t.jsx)(e.li,{children:"For docstrings or comments, limit to 72 characters"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"blank-lines",children:"Blank Lines"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Use blank lines to group parts of your program visually"}),"\n",(0,t.jsx)(e.li,{children:"Don't overuse blank lines within functions or classes"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(e.p,{children:"In this chapter, you learned how to:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Loop through lists efficiently using ",(0,t.jsx)(e.code,{children:"for"})," loops"]}),"\n",(0,t.jsx)(e.li,{children:"Avoid common indentation and syntax errors"}),"\n",(0,t.jsxs)(e.li,{children:["Generate numerical lists using ",(0,t.jsx)(e.code,{children:"range()"})," and list comprehensions"]}),"\n",(0,t.jsx)(e.li,{children:"Work with portions of lists using slices"}),"\n",(0,t.jsx)(e.li,{children:"Copy lists properly"}),"\n",(0,t.jsx)(e.li,{children:"Use tuples for data that shouldn't change"}),"\n",(0,t.jsx)(e.li,{children:"Follow Python coding style guidelines"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"These techniques form the foundation for working with collections of data in Python, and you'll use them frequently in larger programs."})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function o(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);