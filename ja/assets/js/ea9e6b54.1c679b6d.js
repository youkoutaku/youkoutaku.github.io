"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5748],{7533:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/if-statements","title":"If Statements","description":"Making decisions in your programs using conditional tests","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/05-if-statements.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/if-statements","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/if-statements","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/05-if-statements.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"If Statements","description":"Making decisions in your programs using conditional tests","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Working with Lists","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/working-with-lists"},"next":{"title":"Dictionaries","permalink":"/ja/docs/programming-and-tools/languages/python/crash-course/dictionaries"}}');var t=i(74848),l=i(28453);const a={title:"If Statements",description:"Making decisions in your programs using conditional tests",sidebar_position:5},o="If Statements",r={},c=[{value:"A Simple Example",id:"a-simple-example",level:2},{value:"Conditional Tests",id:"conditional-tests",level:2},{value:"Checking for Equality",id:"checking-for-equality",level:3},{value:"Case Sensitivity in Tests",id:"case-sensitivity-in-tests",level:3},{value:"Checking for Inequality",id:"checking-for-inequality",level:3},{value:"Numerical Comparisons",id:"numerical-comparisons",level:3},{value:"Checking Multiple Conditions",id:"checking-multiple-conditions",level:3},{value:"Using <code>and</code> to Check Multiple Conditions",id:"using-and-to-check-multiple-conditions",level:4},{value:"Using <code>or</code> to Check Multiple Conditions",id:"using-or-to-check-multiple-conditions",level:4},{value:"Checking Whether a Value is in a List",id:"checking-whether-a-value-is-in-a-list",level:3},{value:"Checking Whether a Value is Not in a List",id:"checking-whether-a-value-is-not-in-a-list",level:3},{value:"Boolean Expressions",id:"boolean-expressions",level:3},{value:"If Statements",id:"if-statements-1",level:2},{value:"Simple if Statements",id:"simple-if-statements",level:3},{value:"if-else Statements",id:"if-else-statements",level:3},{value:"if-elif-else Chain",id:"if-elif-else-chain",level:3},{value:"Using Multiple elif Blocks",id:"using-multiple-elif-blocks",level:3},{value:"Omitting the else Block",id:"omitting-the-else-block",level:3},{value:"Using if Statements with Lists",id:"using-if-statements-with-lists",level:2},{value:"Checking That a List is Not Empty",id:"checking-that-a-list-is-not-empty",level:3},{value:"Using Multiple Lists",id:"using-multiple-lists",level:3},{value:"Styling Your if Statements",id:"styling-your-if-statements",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"if-statements",children:"If Statements"})}),"\n",(0,t.jsxs)(n.p,{children:["Programming often involves examining a set of conditions and deciding which action to take based on those conditions. Python's ",(0,t.jsx)(n.code,{children:"if"})," statement allows you to examine the current state of a program and respond appropriately to that state."]}),"\n",(0,t.jsx)(n.h2,{id:"a-simple-example",children:"A Simple Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Conditional formatting based on car type\ncars = ['audi', 'bmw', 'subaru', 'toyota']\n\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Audi\nBMW\nSubaru\nToyota\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conditional-tests",children:"Conditional Tests"}),"\n",(0,t.jsxs)(n.p,{children:["At the heart of every ",(0,t.jsx)(n.code,{children:"if"})," statement is an expression that can be evaluated as ",(0,t.jsx)(n.code,{children:"True"})," or ",(0,t.jsx)(n.code,{children:"False"})," and is called a ",(0,t.jsx)(n.strong,{children:"conditional test"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"checking-for-equality",children:"Checking for Equality"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Test for equality\ncar = 'bmw'\nprint(car == 'bmw')  # True\n\ncar = 'audi'\nprint(car == 'bmw')  # False\n"})}),"\n",(0,t.jsx)(n.h3,{id:"case-sensitivity-in-tests",children:"Case Sensitivity in Tests"}),"\n",(0,t.jsx)(n.p,{children:"Testing for equality is case sensitive in Python:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Case-sensitive comparison\ncar = 'Bmw'\nprint(car == 'bmw')  # False\n\n# Convert to lowercase for comparison\ncar = 'Bmw'\nprint(car.lower() == 'bmw')  # True\nprint(car)  # Original value unchanged: 'Bmw'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-for-inequality",children:"Checking for Inequality"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Test for inequality\nrequested_topping = 'mushrooms'\nif requested_topping != 'anchovies':\n    print(\"Hold the anchovies!\")\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Hold the anchovies!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"numerical-comparisons",children:"Numerical Comparisons"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Numerical comparisons\nanswer = 17\nif answer != 42:\n    print("That is not the correct answer.")\n\na = 0\nb = 10\nprint(a > b)   # False\nprint(b >= a)  # True\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can use these comparison operators:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"=="})," (equal to)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"!="})," (not equal to)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:">"})," (greater than)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:">="})," (greater than or equal to)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<"})," (less than)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<="})," (less than or equal to)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"checking-multiple-conditions",children:"Checking Multiple Conditions"}),"\n",(0,t.jsxs)(n.h4,{id:"using-and-to-check-multiple-conditions",children:["Using ",(0,t.jsx)(n.code,{children:"and"})," to Check Multiple Conditions"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Both conditions must be True\na = 0\nb = 10\nprint(a > 1 and b > 5)  # False (first condition is False)\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"using-or-to-check-multiple-conditions",children:["Using ",(0,t.jsx)(n.code,{children:"or"})," to Check Multiple Conditions"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# At least one condition must be True\na = 0\nb = 10\nprint(a > 1 or b > 5)   # True (second condition is True)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-whether-a-value-is-in-a-list",children:"Checking Whether a Value is in a List"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Check if value is in list\nanimals = ['cat', 'dog', 'pig']\nprint('cat' in animals)     # True\nprint('tiger' in animals)   # False\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-whether-a-value-is-not-in-a-list",children:"Checking Whether a Value is Not in a List"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Check if value is not in list\nanimals = ['cat', 'dog', 'pig']\nprint('cat' not in animals)     # False\nprint('tiger' not in animals)   # True\n"})}),"\n",(0,t.jsx)(n.h3,{id:"boolean-expressions",children:"Boolean Expressions"}),"\n",(0,t.jsx)(n.p,{children:"A Boolean expression is just another name for a conditional test:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Boolean values\na = True\nb = False\nprint(a, b)  # True False\n"})}),"\n",(0,t.jsx)(n.h2,{id:"if-statements-1",children:"If Statements"}),"\n",(0,t.jsx)(n.h3,{id:"simple-if-statements",children:"Simple if Statements"}),"\n",(0,t.jsxs)(n.p,{children:["The simplest kind of ",(0,t.jsx)(n.code,{children:"if"})," statement has one test and one action:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Basic if statement\na = 10\nif a > 0:\n    print('Yes, a > 0.')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Yes, a > 0.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"if-else-statements",children:"if-else Statements"}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"if-else"})," block is similar to a simple ",(0,t.jsx)(n.code,{children:"if"})," statement, but the ",(0,t.jsx)(n.code,{children:"else"})," statement allows you to define an action that should be taken when the conditional test fails:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# if-else statement\na = 10\nif a > 0:\n    print('Yes')\nelse:\n    print('No')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Yes\n"})}),"\n",(0,t.jsx)(n.h3,{id:"if-elif-else-chain",children:"if-elif-else Chain"}),"\n",(0,t.jsxs)(n.p,{children:["Often, you'll need to test more than two possible situations. Python's ",(0,t.jsx)(n.code,{children:"if-elif-else"})," chain makes this possible:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# if-elif-else chain\nage = 12\nif age < 4:\n    print("$0")\nelif age < 18:\n    print("$25")\nelse:\n    print("$45")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$25\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also store the result in a variable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Store result in variable\nage = 12\nif age < 4:\n    price = 0\nelif age < 18:\n    price = 25\nelse:\n    price = 45\n    \nprint(f"Your cost is ${price}")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Your cost is $25\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-multiple-elif-blocks",children:"Using Multiple elif Blocks"}),"\n",(0,t.jsxs)(n.p,{children:["You can use as many ",(0,t.jsx)(n.code,{children:"elif"})," blocks as you need:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Multiple elif blocks\nage = 12\nif age < 4:\n    price = 0\nelif age < 18:\n    price = 25\nelif age < 65:\n    price = 40\nelse:\n    price = 20\n    \nprint(f"Your admission cost is ${price}.")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"omitting-the-else-block",children:"Omitting the else Block"}),"\n",(0,t.jsxs)(n.p,{children:["Python does not require an ",(0,t.jsx)(n.code,{children:"else"})," block at the end of an ",(0,t.jsx)(n.code,{children:"if-elif"})," chain. The ",(0,t.jsx)(n.code,{children:"else"})," block is a catchall statement that matches any condition that wasn't matched by a specific ",(0,t.jsx)(n.code,{children:"if"})," or ",(0,t.jsx)(n.code,{children:"elif"})," test."]}),"\n",(0,t.jsx)(n.h2,{id:"using-if-statements-with-lists",children:"Using if Statements with Lists"}),"\n",(0,t.jsx)(n.p,{children:"Checking for special values in a list and handling them appropriately is one task you'll do again and again when you're working with lists:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Handling special cases in a list\nrequested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n\nfor requested_topping in requested_toppings:\n    if requested_topping == 'green peppers':\n        print(\"Sorry, we are out of green peppers right now.\")\n    else:\n        print(f\"Adding {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Adding mushrooms.\nSorry, we are out of green peppers right now.\nAdding extra cheese.\n\nFinished making your pizza!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-that-a-list-is-not-empty",children:"Checking That a List is Not Empty"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Check for empty list\nrequested_toppings = []\n\nif requested_toppings:\n    for requested_topping in requested_toppings:\n        print(f"Adding {requested_topping}.")\n    print("\\nFinished making your pizza!")\nelse:\n    print("Are you sure you want a plain pizza?")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-multiple-lists",children:"Using Multiple Lists"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Working with multiple lists\navailable_toppings = ['mushrooms', 'olives', 'green peppers',\n                     'pepperoni', 'pineapple', 'extra cheese']\nrequested_toppings = ['mushrooms', 'french fries', 'extra cheese']\n\nfor requested_topping in requested_toppings:\n    if requested_topping in available_toppings:\n        print(f\"Adding {requested_topping}.\")\n    else:\n        print(f\"Sorry, we don't have {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"styling-your-if-statements",children:"Styling Your if Statements"}),"\n",(0,t.jsx)(n.p,{children:"The PEP 8 style guide recommends the following approach for styling conditional tests:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use a single space around comparison operators: ",(0,t.jsx)(n.code,{children:"=="}),", ",(0,t.jsx)(n.code,{children:">="}),", ",(0,t.jsx)(n.code,{children:"<="})]}),"\n",(0,t.jsxs)(n.li,{children:["Don't put spaces around the inequality operators: ",(0,t.jsx)(n.code,{children:"!="})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Good style\nif age < 4:\n    \n# Avoid\nif age<4:\n"})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"In this chapter you learned how to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Write conditional tests using comparison operators"}),"\n",(0,t.jsxs)(n.li,{children:["Combine conditional tests using ",(0,t.jsx)(n.code,{children:"and"})," and ",(0,t.jsx)(n.code,{children:"or"})]}),"\n",(0,t.jsx)(n.li,{children:"Check whether values are or aren't in lists"}),"\n",(0,t.jsxs)(n.li,{children:["Write simple ",(0,t.jsx)(n.code,{children:"if"})," statements, ",(0,t.jsx)(n.code,{children:"if-else"})," blocks, and ",(0,t.jsx)(n.code,{children:"if-elif-else"})," chains"]}),"\n",(0,t.jsx)(n.li,{children:"Use conditional tests to handle special situations in lists"}),"\n",(0,t.jsx)(n.li,{children:"Style your conditional tests according to PEP 8 guidelines"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Conditional tests form the foundation of decision-making in programming, allowing your programs to respond appropriately to different situations."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(96540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);