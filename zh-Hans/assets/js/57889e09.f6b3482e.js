"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[85304],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},91118:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/lists","title":"Lists","description":"Working with Python lists - creation, modification, and organization","source":"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/2-programming-and-tools/1-languages/1-python/crash-course/03-lists.md","sourceDirName":"2-programming-and-tools/1-languages/1-python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/lists","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/lists","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/1-languages/1-python/crash-course/03-lists.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Lists","description":"Working with Python lists - creation, modification, and organization","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Variables and Data Types","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/variables-datatypes"},"next":{"title":"Working with Lists","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/working-with-lists"}}');var t=i(74848),r=i(28453);const a={title:"Lists",description:"Working with Python lists - creation, modification, and organization",sidebar_position:3},l="Lists",o={},c=[{value:"Creating and Accessing Lists",id:"creating-and-accessing-lists",level:2},{value:"Basic List Creation",id:"basic-list-creation",level:3},{value:"Accessing List Elements",id:"accessing-list-elements",level:3},{value:"Using List Values",id:"using-list-values",level:3},{value:"Modifying Lists",id:"modifying-lists",level:2},{value:"Changing Elements",id:"changing-elements",level:3},{value:"Adding Elements",id:"adding-elements",level:3},{value:"Using append()",id:"using-append",level:4},{value:"Using insert()",id:"using-insert",level:4},{value:"Removing Elements",id:"removing-elements",level:3},{value:"Using del",id:"using-del",level:4},{value:"Using pop()",id:"using-pop",level:4},{value:"Using remove()",id:"using-remove",level:4},{value:"Organizing Lists",id:"organizing-lists",level:2},{value:"Sorting Permanently with sort()",id:"sorting-permanently-with-sort",level:3},{value:"Sorting Temporarily with sorted()",id:"sorting-temporarily-with-sorted",level:3},{value:"Reversing a List",id:"reversing-a-list",level:3},{value:"Finding List Length",id:"finding-list-length",level:3},{value:"Avoiding Index Errors",id:"avoiding-index-errors",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,t.jsx)(n.p,{children:"A list is a collection of items in a particular order. You can make a list that includes letters of the alphabet, digits, names, or any other items. Lists are one of Python's most useful features."}),"\n",(0,t.jsx)(n.h2,{id:"creating-and-accessing-lists",children:"Creating and Accessing Lists"}),"\n",(0,t.jsx)(n.h3,{id:"basic-list-creation",children:"Basic List Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Create a list\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\nprint(bicycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['trek', 'cannondale', 'redline', 'specialized']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"accessing-list-elements",children:"Accessing List Elements"}),"\n",(0,t.jsx)(n.p,{children:"Lists are ordered collections, so you can access any element by telling Python the position (index) of the item desired. List indices start at 0, not 1."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Access elements by index\nprint(bicycles[0])\nprint(bicycles[0].title())\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"trek\nTrek\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Access multiple elements\nprint(bicycles[0])\nprint(bicycles[1])\nprint(bicycles[2])\nprint(bicycles[3])\nprint(bicycles[-1])  # Last element\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"trek\ncannondale\nredline\nspecialized\nspecialized\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-list-values",children:"Using List Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Using list index in a string\nmessage = f"My first bicycle was a {bicycles[0].title()}."\nprint(message)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"My first bicycle was a Trek.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"modifying-lists",children:"Modifying Lists"}),"\n",(0,t.jsx)(n.h3,{id:"changing-elements",children:"Changing Elements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Change an element\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n\nmotorcycles[0] = 'ducati'\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['honda', 'yamaha', 'suzuki']\n['ducati', 'yamaha', 'suzuki']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"adding-elements",children:"Adding Elements"}),"\n",(0,t.jsx)(n.h4,{id:"using-append",children:"Using append()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"append()"})," method adds an element to the end of a list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Add to the end of the list\nmotorcycles.append('honda')\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['ducati', 'yamaha', 'suzuki', 'honda']\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also build lists dynamically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Building a list dynamically\nmotorcycles = []\nmotorcycles.append('honda')\nmotorcycles.append('yamaha')\nmotorcycles.append('suzuki')\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['honda', 'yamaha', 'suzuki']\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-insert",children:"Using insert()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"insert()"})," method adds an element at any position in the list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Insert at a specific position\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nmotorcycles.insert(0, 'ducati')\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['ducati', 'honda', 'yamaha', 'suzuki']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removing-elements",children:"Removing Elements"}),"\n",(0,t.jsx)(n.h4,{id:"using-del",children:"Using del"}),"\n",(0,t.jsxs)(n.p,{children:["If you know the position of the item you want to remove, use the ",(0,t.jsx)(n.code,{children:"del"})," statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Delete by index\nmotorcycles = ['honda', 'yamaha', 'suzuki']\ndel motorcycles[0]\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['yamaha', 'suzuki']\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-pop",children:"Using pop()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pop()"})," method removes an element from a list and returns it (like a stack operation):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Pop the last element\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nmine = motorcycles.pop()\nprint(mine)\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"suzuki\n['honda', 'yamaha']\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also pop from any position:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Pop from a specific position\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nfirst_owned = motorcycles.pop(1)\nprint(f\"The first motorcycle I owned was a {first_owned.title()}.\")\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"The first motorcycle I owned was a Yamaha.\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-remove",children:"Using remove()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"remove()"})," method deletes an element by its value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Remove by value\nmotorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\nmotorcycles.remove('yamaha')\nprint(motorcycles)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['honda', 'suzuki', 'ducati']\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also store the value in a variable first:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Remove using a variable\nmotorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\ntoo_expensive = 'yamaha'\nmotorcycles.remove(too_expensive)\nprint(motorcycles)\nprint(f'\\nA {too_expensive.title()} is too expensive for me.')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['honda', 'suzuki', 'ducati']\n\nA Yamaha is too expensive for me.\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"remove()"})," method only deletes the first occurrence of the value. If the value appears multiple times, you'll need to use a loop."]})}),"\n",(0,t.jsx)(n.h2,{id:"organizing-lists",children:"Organizing Lists"}),"\n",(0,t.jsx)(n.h3,{id:"sorting-permanently-with-sort",children:"Sorting Permanently with sort()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"sort()"})," method permanently changes the order of the list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Sort alphabetically\ncars = ["bmw", "audi", "toyota", "subaru"]\ncars.sort()\nprint(cars)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['audi', 'bmw', 'subaru', 'toyota']\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Sort in reverse alphabetical order\ncars = ["bmw", "audi", "toyota", "subaru"]\ncars.sort(reverse=True)\nprint(cars)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['toyota', 'subaru', 'bmw', 'audi']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sorting-temporarily-with-sorted",children:"Sorting Temporarily with sorted()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"sorted()"})," function displays a list in sorted order without affecting the original list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Temporary sorting\ncars = ["bmw", "audi", "toyota", "subaru"]\nprint("Original:")\nprint(cars)\nprint("\\nSorted:")\nprint(sorted(cars))\nprint("\\nOriginal again:")\nprint(cars)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Original:\n['bmw', 'audi', 'toyota', 'subaru']\n\nSorted:\n['audi', 'bmw', 'subaru', 'toyota']\n\nOriginal again:\n['bmw', 'audi', 'toyota', 'subaru']\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Sorting with Mixed Case",type:"warning",children:(0,t.jsx)(n.p,{children:"When sorting lists that contain both uppercase and lowercase letters, the results can be complex. Uppercase letters are sorted before lowercase letters."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Mixed case sorting example\ncars = ["bmw", "audi", "toyota", "subaru", "BMW"]\ncars.sort()\nprint(cars)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['BMW', 'audi', 'bmw', 'subaru', 'toyota']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reversing-a-list",children:"Reversing a List"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"reverse()"})," method reverses the original order of a list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Reverse the list order\ncars = ["bmw", "audi", "toyota", "subaru"]\nprint(cars)\ncars.reverse()\nprint(cars)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"['bmw', 'audi', 'toyota', 'subaru']\n['subaru', 'toyota', 'audi', 'bmw']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"finding-list-length",children:"Finding List Length"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"len()"})," function to find the length of a list:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Get list length\ncars = ["bmw", "audi", "toyota", "subaru"]\nprint(len(cars))\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"4\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Empty list length\ncars = []\nprint(len(cars))\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"avoiding-index-errors",children:"Avoiding Index Errors"}),"\n",(0,t.jsx)(n.p,{children:"Python will give you an IndexError if you try to access an index that doesn't exist:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# This will cause an error\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles[3])  # IndexError: list index out of range\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Using Negative Indices",type:"tip",children:(0,t.jsxs)(n.p,{children:["Remember that ",(0,t.jsx)(n.code,{children:"index[-1]"})," always returns the last element of a list, which is useful for avoiding index errors when you don't know the length of the list."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles[-1])  # suzuki\n"})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"In this chapter, you learned:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"How to define a list and work with individual elements"}),"\n",(0,t.jsx)(n.li,{children:"How to add, remove, and modify elements"}),"\n",(0,t.jsx)(n.li,{children:"How to organize lists permanently and temporarily"}),"\n",(0,t.jsx)(n.li,{children:"How to avoid common index errors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Lists are fundamental to Python programming, and you'll use them frequently in your programs. The ability to work with collections of information is essential for handling real-world data effectively."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);