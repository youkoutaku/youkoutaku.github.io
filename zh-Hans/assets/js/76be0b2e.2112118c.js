"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[76126],{6665:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/testing","title":"Testing Your Code","description":"Writing tests to ensure your code works correctly and prevent regressions","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/11-testing.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/testing","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/11-testing.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Testing Your Code","description":"Writing tests to ensure your code works correctly and prevent regressions","sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Files and Exceptions","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/files-exceptions"},"next":{"title":"MATLAB","permalink":"/zh-Hans/docs/category/matlab"}}');var i=n(74848),r=n(28453);const o={title:"Testing Your Code",description:"Writing tests to ensure your code works correctly and prevent regressions",sidebar_position:11},a="Testing Your Code",l={},d=[{value:"Testing a Function",id:"testing-a-function",level:2},{value:"A Function to Test",id:"a-function-to-test",level:3},{value:"Unit Tests and Test Cases",id:"unit-tests-and-test-cases",level:3},{value:"A Passing Test",id:"a-passing-test",level:3},{value:"Key Components of a Test",id:"key-components-of-a-test",level:3},{value:"A Failing Test",id:"a-failing-test",level:3},{value:"Testing a Class",id:"testing-a-class",level:2},{value:"A Class to Test",id:"a-class-to-test",level:3},{value:"Testing the AnonymousSurvey Class",id:"testing-the-anonymoussurvey-class",level:3},{value:"The setUp() Method",id:"the-setup-method",level:3},{value:"Assert Methods",id:"assert-methods",level:2},{value:"Testing Guidelines",id:"testing-guidelines",level:2},{value:"When to Write Tests",id:"when-to-write-tests",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:3},{value:"What to Test",id:"what-to-test",level:3},{value:"Example: Testing Edge Cases",id:"example-testing-edge-cases",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"testing-your-code",children:"Testing Your Code"})}),"\n",(0,i.jsxs)(s.p,{children:["When you write a function or a class, you can also write ",(0,i.jsx)(s.strong,{children:"tests"})," for that code. Testing proves that your code works as it's supposed to in response to all the input types it's designed to receive."]}),"\n",(0,i.jsx)(s.h2,{id:"testing-a-function",children:"Testing a Function"}),"\n",(0,i.jsx)(s.h3,{id:"a-function-to-test",children:"A Function to Test"}),"\n",(0,i.jsx)(s.p,{children:"Let's start with a simple function that takes in a first and last name and returns a neatly formatted full name:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# name_function.py\ndef get_formatted_name(first, last):\n    """Generate a neatly formatted full name."""\n    full_name = f"{first} {last}"\n    return full_name.title()\n'})}),"\n",(0,i.jsx)(s.p,{children:"Here's a program that uses this function:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# names.py\nfrom name_function import get_formatted_name\n\nprint("Enter \'q\' at any time to quit.")\nwhile True:\n    first = input("\\nPlease give me a first name: ")\n    if first == \'q\':\n        break\n    last = input("Please give me a last name: ")\n    if last == \'q\':\n        break\n    \n    formatted_name = get_formatted_name(first, last)\n    print(f"\\tNeatly formatted name: {formatted_name}.")\n'})}),"\n",(0,i.jsx)(s.h3,{id:"unit-tests-and-test-cases",children:"Unit Tests and Test Cases"}),"\n",(0,i.jsxs)(s.p,{children:["Python's ",(0,i.jsx)(s.code,{children:"unittest"})," module provides tools for testing your code. A ",(0,i.jsx)(s.strong,{children:"unit test"})," verifies that one specific aspect of a function's behavior is correct. A ",(0,i.jsx)(s.strong,{children:"test case"})," is a collection of unit tests that together prove that a function behaves as it's supposed to within the full range of situations you expect it to handle."]}),"\n",(0,i.jsx)(s.h3,{id:"a-passing-test",children:"A Passing Test"}),"\n",(0,i.jsxs)(s.p,{children:["Here's a test case for ",(0,i.jsx)(s.code,{children:"get_formatted_name()"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"# test_name_function.py\nimport unittest\nfrom name_function import get_formatted_name\n\nclass NamesTestCase(unittest.TestCase):\n    \"\"\"Tests for 'name_function.py'.\"\"\"\n\n    def test_first_last_name(self):\n        \"\"\"Do names like 'Janis Joplin' work?\"\"\"\n        formatted_name = get_formatted_name('janis', 'joplin')\n        self.assertEqual(formatted_name, 'Janis Joplin')\n\nif __name__ == '__main__':\n    unittest.main()\n"})}),"\n",(0,i.jsx)(s.p,{children:"Output:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:".\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n"})}),"\n",(0,i.jsx)(s.h3,{id:"key-components-of-a-test",children:"Key Components of a Test"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Import unittest and the function to test"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.strong,{children:["Create a class that inherits from ",(0,i.jsx)(s.code,{children:"unittest.TestCase"})]})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.strong,{children:["Write test methods that start with ",(0,i.jsx)(s.code,{children:"test_"})]})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Use assertion methods to verify expected behavior"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.strong,{children:["Include ",(0,i.jsx)(s.code,{children:"unittest.main()"})," to run the tests"]})}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"a-failing-test",children:"A Failing Test"}),"\n",(0,i.jsx)(s.p,{children:"Let's modify our function to handle middle names:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# name_function.py (modified)\ndef get_formatted_name(first, last, middle=\'\'):\n    """Generate a neatly formatted full name."""\n    if middle:\n        full_name = f"{first} {middle} {last}"\n    else:\n        full_name = f"{first} {last}"\n    return full_name.title()\n'})}),"\n",(0,i.jsx)(s.p,{children:"Now let's add a test for middle names:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"# test_name_function.py (with failing test)\nimport unittest\nfrom name_function import get_formatted_name\n\nclass NamesTestCase(unittest.TestCase):\n    \"\"\"Tests for 'name_function.py'.\"\"\"\n\n    def test_first_last_name(self):\n        \"\"\"Do names like 'Janis Joplin' work?\"\"\"\n        formatted_name = get_formatted_name('janis', 'joplin')\n        self.assertEqual(formatted_name, 'Janis Joplin')\n\n    def test_first_middle_last_name(self):\n        \"\"\"Do names like 'Wolfgang Amadeus Mozart' work?\"\"\"\n        formatted_name = get_formatted_name('wolfgang', 'mozart', 'amadeus')\n        self.assertEqual(formatted_name, 'Wolfgang Amadeus Mozart')\n\nif __name__ == '__main__':\n    unittest.main()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"testing-a-class",children:"Testing a Class"}),"\n",(0,i.jsx)(s.h3,{id:"a-class-to-test",children:"A Class to Test"}),"\n",(0,i.jsx)(s.p,{children:"Here's a class that models a survey:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# survey.py\nclass AnonymousSurvey:\n    """Collect anonymous answers to a survey question."""\n\n    def __init__(self, question):\n        """Store a question, and prepare to store responses."""\n        self.question = question\n        self.responses = []\n\n    def show_question(self):\n        """Show the survey question."""\n        print(self.question)\n\n    def store_response(self, new_response):\n        """Store a single response to the survey."""\n        self.responses.append(new_response)\n\n    def show_results(self):\n        """Show all the responses that have been given."""\n        print("Survey results:")\n        for response in self.responses:\n            print(f"- {response}")\n'})}),"\n",(0,i.jsx)(s.h3,{id:"testing-the-anonymoussurvey-class",children:"Testing the AnonymousSurvey Class"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# test_survey.py\nimport unittest\nfrom survey import AnonymousSurvey\n\nclass TestAnonymousSurvey(unittest.TestCase):\n    """Tests for the class AnonymousSurvey."""\n\n    def test_store_single_response(self):\n        """Test that a single response is stored properly."""\n        question = "What language did you first learn to speak?"\n        my_survey = AnonymousSurvey(question)\n        my_survey.store_response(\'English\')\n        \n        self.assertIn(\'English\', my_survey.responses)\n\n    def test_store_three_responses(self):\n        """Test that three individual responses are stored properly."""\n        question = "What language did you first learn to speak?"\n        my_survey = AnonymousSurvey(question)\n        responses = [\'English\', \'Spanish\', \'Mandarin\']\n        \n        for response in responses:\n            my_survey.store_response(response)\n            \n        for response in responses:\n            self.assertIn(response, my_survey.responses)\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,i.jsx)(s.h3,{id:"the-setup-method",children:"The setUp() Method"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"unittest.TestCase"})," class has a ",(0,i.jsx)(s.code,{children:"setUp()"})," method that allows you to create objects once and use them in each of your test methods:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# test_survey.py (improved)\nimport unittest\nfrom survey import AnonymousSurvey\n\nclass TestAnonymousSurvey(unittest.TestCase):\n    """Tests for the class AnonymousSurvey."""\n\n    def setUp(self):\n        """\n        Create a survey and a set of responses for use in all test methods.\n        """\n        question = "What language did you first learn to speak?"\n        self.my_survey = AnonymousSurvey(question)\n        self.responses = [\'English\', \'Spanish\', \'Mandarin\']\n\n    def test_store_single_response(self):\n        """Test that a single response is stored properly."""\n        self.my_survey.store_response(self.responses[0])\n        self.assertIn(self.responses[0], self.my_survey.responses)\n\n    def test_store_three_responses(self):\n        """Test that three individual responses are stored properly."""\n        for response in self.responses:\n            self.my_survey.store_response(response)\n        for response in self.responses:\n            self.assertIn(response, self.my_survey.responses)\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,i.jsx)(s.h2,{id:"assert-methods",children:"Assert Methods"}),"\n",(0,i.jsx)(s.p,{children:"The unittest module provides many assert methods to test different conditions:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Method"}),(0,i.jsx)(s.th,{children:"Use"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertEqual(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"a == b"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertNotEqual(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"a != b"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertTrue(x)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"x"})," is True"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertFalse(x)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"x"})," is False"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIs(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"a is b"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIsNot(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"a is not b"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIsNone(x)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"x is None"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIsNotNone(x)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"x is not None"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIn(item, list)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"item"})," is in ",(0,i.jsx)(s.code,{children:"list"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertNotIn(item, list)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"item"})," is not in ",(0,i.jsx)(s.code,{children:"list"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertIsInstance(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"isinstance(a, b)"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"assertNotIsInstance(a, b)"})}),(0,i.jsxs)(s.td,{children:["Verify that ",(0,i.jsx)(s.code,{children:"not isinstance(a, b)"})]})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,i.jsx)(s.h3,{id:"when-to-write-tests",children:"When to Write Tests"}),"\n",(0,i.jsx)(s.p,{children:"When you're starting out, write tests for the most critical behaviors of your functions and classes. As you become more experienced, you'll write them more regularly."}),"\n",(0,i.jsx)(s.h3,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Test one thing at a time"}),": Each test method should test one specific behavior"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use descriptive test names"}),": Your test method names should clearly indicate what they're testing"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Keep tests simple"}),": Tests should be easy to understand and maintain"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Test edge cases"}),": Don't just test typical inputs; test unusual cases too"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use setUp() for common setup"}),": If multiple tests need the same setup, use the setUp() method"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"what-to-test",children:"What to Test"}),"\n",(0,i.jsx)(s.p,{children:"Good candidates for testing include:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Functions with complex logic"}),"\n",(0,i.jsx)(s.li,{children:"Functions that handle user input"}),"\n",(0,i.jsx)(s.li,{children:"Functions that process data from external sources"}),"\n",(0,i.jsx)(s.li,{children:"Edge cases and error conditions"}),"\n",(0,i.jsx)(s.li,{children:"Critical business logic"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"example-testing-edge-cases",children:"Example: Testing Edge Cases"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# calculator.py\ndef divide(a, b):\n    """Divide a by b."""\n    if b == 0:\n        raise ValueError("Cannot divide by zero")\n    return a / b\n\n# test_calculator.py\nimport unittest\nfrom calculator import divide\n\nclass TestCalculator(unittest.TestCase):\n    """Tests for calculator functions."""\n\n    def test_divide_positive_numbers(self):\n        """Test dividing positive numbers."""\n        result = divide(10, 2)\n        self.assertEqual(result, 5)\n\n    def test_divide_negative_numbers(self):\n        """Test dividing negative numbers."""\n        result = divide(-10, 2)\n        self.assertEqual(result, -5)\n\n    def test_divide_by_zero(self):\n        """Test that dividing by zero raises ValueError."""\n        with self.assertRaises(ValueError):\n            divide(10, 0)\n\n    def test_divide_floats(self):\n        """Test dividing floating point numbers."""\n        result = divide(7.5, 2.5)\n        self.assertEqual(result, 3.0)\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,i.jsx)(s.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(s.p,{children:"You can run your tests in several ways:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"# Run a specific test file\npython test_name_function.py\n\n# Run all tests in a directory\npython -m unittest discover\n\n# Run tests with more verbose output\npython -m unittest -v test_name_function.py\n"})}),"\n",(0,i.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(s.p,{children:"In this chapter you learned how to:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Write simple tests using Python's unittest module"}),"\n",(0,i.jsx)(s.li,{children:"Use assert methods to verify that your functions and classes work correctly"}),"\n",(0,i.jsx)(s.li,{children:"Use the setUp() method to create objects that can be used in multiple test methods"}),"\n",(0,i.jsx)(s.li,{children:"Test both functions and classes"}),"\n",(0,i.jsx)(s.li,{children:"Understand when and what to test"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Testing your code is essential for building reliable software. When you write tests, you can be confident that your code will work correctly even as you make changes and improvements to your programs. Testing gives you the freedom to improve your code without worrying about accidentally breaking existing functionality."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(96540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);