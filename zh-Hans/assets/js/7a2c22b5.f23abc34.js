"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[78177],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},99107:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming-and-tools/languages/python/crash-course/files-exceptions","title":"Files and Exceptions","description":"Reading from and writing to files, and handling errors gracefully","source":"@site/docs/2-programming-and-tools/languages/python/crash-course/10-files-exceptions.md","sourceDirName":"2-programming-and-tools/languages/python/crash-course","slug":"/programming-and-tools/languages/python/crash-course/files-exceptions","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/files-exceptions","draft":false,"unlisted":false,"editUrl":"https://github.com/youkoutaku/docusaurus-youkoutaku/tree/main/docs/2-programming-and-tools/languages/python/crash-course/10-files-exceptions.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Files and Exceptions","description":"Reading from and writing to files, and handling errors gracefully","sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Classes","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/classes"},"next":{"title":"Testing Your Code","permalink":"/zh-Hans/docs/programming-and-tools/languages/python/crash-course/testing"}}');var r=i(74848),s=i(28453);const o={title:"Files and Exceptions",description:"Reading from and writing to files, and handling errors gracefully",sidebar_position:10},l="Files and Exceptions",a={},d=[{value:"Reading from a File",id:"reading-from-a-file",level:2},{value:"Reading an Entire File",id:"reading-an-entire-file",level:3},{value:"File Paths",id:"file-paths",level:3},{value:"Relative and Absolute File Paths",id:"relative-and-absolute-file-paths",level:4},{value:"Reading Line by Line",id:"reading-line-by-line",level:3},{value:"Making a List of Lines from a File",id:"making-a-list-of-lines-from-a-file",level:3},{value:"Working with a File&#39;s Contents",id:"working-with-a-files-contents",level:3},{value:"Large Files: One Million Digits",id:"large-files-one-million-digits",level:3},{value:"Is Your Birthday Contained in Pi?",id:"is-your-birthday-contained-in-pi",level:3},{value:"Writing to a File",id:"writing-to-a-file",level:2},{value:"Writing to an Empty File",id:"writing-to-an-empty-file",level:3},{value:"Writing Multiple Lines",id:"writing-multiple-lines",level:3},{value:"Appending to a File",id:"appending-to-a-file",level:3},{value:"Exceptions",id:"exceptions",level:2},{value:"Handling the ZeroDivisionError Exception",id:"handling-the-zerodivisionerror-exception",level:3},{value:"Using try-except Blocks",id:"using-try-except-blocks",level:3},{value:"Using Exceptions to Prevent Crashes",id:"using-exceptions-to-prevent-crashes",level:3},{value:"The else Block",id:"the-else-block",level:3},{value:"Handling the FileNotFoundError Exception",id:"handling-the-filenotfounderror-exception",level:3},{value:"Analyzing Text",id:"analyzing-text",level:3},{value:"Working with Multiple Files",id:"working-with-multiple-files",level:3},{value:"Failing Silently",id:"failing-silently",level:3},{value:"Deciding Which Errors to Report",id:"deciding-which-errors-to-report",level:3},{value:"Storing Data",id:"storing-data",level:2},{value:"Using json.dump() and json.load()",id:"using-jsondump-and-jsonload",level:3},{value:"Saving and Reading User-Generated Data",id:"saving-and-reading-user-generated-data",level:3},{value:"Combining the Programs",id:"combining-the-programs",level:3},{value:"Refactoring",id:"refactoring",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"files-and-exceptions",children:"Files and Exceptions"})}),"\n",(0,r.jsx)(n.p,{children:"Learning to work with files and save data will make your programs more relevant and useful. Users will be able to choose what data to enter and when to enter it, and they can use your programs and quit whenever they want, picking up where they left off later."}),"\n",(0,r.jsx)(n.h2,{id:"reading-from-a-file",children:"Reading from a File"}),"\n",(0,r.jsx)(n.h3,{id:"reading-an-entire-file",children:"Reading an Entire File"}),"\n",(0,r.jsxs)(n.p,{children:["To work with the contents of a file, you first need to read the file into memory. The ",(0,r.jsx)(n.code,{children:"open()"})," function takes one argument: the name of the file you want to open."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"with open('pi_digits.txt') as file_object:\n    contents = file_object.read()\nprint(contents)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The keyword ",(0,r.jsx)(n.code,{children:"with"})," closes the file once access to it is no longer needed. You could open and close the file by calling ",(0,r.jsx)(n.code,{children:"open()"})," and ",(0,r.jsx)(n.code,{children:"close()"}),", but if a bug in your program prevents the ",(0,r.jsx)(n.code,{children:"close()"})," statement from executing, the file may never close."]}),"\n",(0,r.jsx)(n.h3,{id:"file-paths",children:"File Paths"}),"\n",(0,r.jsxs)(n.p,{children:["When you pass a simple filename like ",(0,r.jsx)(n.code,{children:"'pi_digits.txt'"})," to the ",(0,r.jsx)(n.code,{children:"open()"})," function, Python looks in the directory where the program being executed is stored."]}),"\n",(0,r.jsx)(n.h4,{id:"relative-and-absolute-file-paths",children:"Relative and Absolute File Paths"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Relative path\nwith open('text_files/filename.txt') as file_object:\n\n# Absolute path (Linux/macOS)\nfile_path = '/home/ehmatthes/other_files/text_files/filename.txt'\nwith open(file_path) as file_object:\n\n# Absolute path (Windows)\nfile_path = 'C:\\Users\\ehmatthes\\other_files\\text_files\\filename.txt'\nwith open(file_path) as file_object:\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Windows Paths",type:"note",children:(0,r.jsxs)(n.p,{children:["Windows systems use a backslash (",(0,r.jsx)(n.code,{children:"\\"}),") instead of a forward slash (",(0,r.jsx)(n.code,{children:"/"}),") when displaying file paths, but you can use forward slashes in your code even on Windows systems."]})}),"\n",(0,r.jsx)(n.h3,{id:"reading-line-by-line",children:"Reading Line by Line"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This might produce extra blank lines because each line in the text file ends with a newline character, and the ",(0,r.jsx)(n.code,{children:"print()"})," function adds its own newline. You can remove these extra blank lines:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip())\n"})}),"\n",(0,r.jsx)(n.h3,{id:"making-a-list-of-lines-from-a-file",children:"Making a List of Lines from a File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"readlines()"})," method takes each line from the file and stores it in a list, which is returned to you."]}),"\n",(0,r.jsx)(n.h3,{id:"working-with-a-files-contents",children:"Working with a File's Contents"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nprint(pi_string)\nprint(len(pi_string))\n"})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"3.1415926535897932384626433832795\n32\n"})}),"\n",(0,r.jsx)(n.h3,{id:"large-files-one-million-digits",children:"Large Files: One Million Digits"}),"\n",(0,r.jsx)(n.p,{children:"When Python reads from a text file, it interprets all text in the file as a string. Here's how you might work with a very large file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nprint(f\"{pi_string[:52]}...\")\nprint(len(pi_string))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"is-your-birthday-contained-in-pi",children:"Is Your Birthday Contained in Pi?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'filename = \'pi_million_digits.txt\'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = \'\'\nfor line in lines:\n    pi_string += line.strip()\n\nbirthday = input("Enter your birthday, in the form mmddyy: ")\nif birthday in pi_string:\n    print("Your birthday appears in the first million digits of pi!")\nelse:\n    print("Your birthday does not appear in the first million digits of pi.")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"writing-to-a-file",children:"Writing to a File"}),"\n",(0,r.jsx)(n.h3,{id:"writing-to-an-empty-file",children:"Writing to an Empty File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\")\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The second argument, ",(0,r.jsx)(n.code,{children:"'w'"}),", tells Python that you want to open the file in ",(0,r.jsx)(n.strong,{children:"write mode"}),". You can open a file in:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"read mode"})," (",(0,r.jsx)(n.code,{children:"'r'"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"write mode"})," (",(0,r.jsx)(n.code,{children:"'w'"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"append mode"})," (",(0,r.jsx)(n.code,{children:"'a'"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"read and write mode"})," (",(0,r.jsx)(n.code,{children:"'r+'"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Write Mode",type:"warning",children:(0,r.jsxs)(n.p,{children:["Opening a file in write mode (",(0,r.jsx)(n.code,{children:"'w'"}),") will erase the contents of the file before returning the file object."]})}),"\n",(0,r.jsx)(n.h3,{id:"writing-multiple-lines",children:"Writing Multiple Lines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\\n\")\n    file_object.write(\"I love creating new games.\\n\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"appending-to-a-file",children:"Appending to a File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'programming.txt'\n\nwith open(filename, 'a') as file_object:\n    file_object.write(\"I also love finding meaning in large datasets.\\n\")\n    file_object.write(\"I love creating apps that can run in a browser.\\n\")\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exceptions",children:"Exceptions"}),"\n",(0,r.jsxs)(n.p,{children:["Python uses special objects called ",(0,r.jsx)(n.strong,{children:"exceptions"})," to manage errors that arise during a program's execution. Whenever an error occurs that makes Python unsure what to do next, it creates an exception object."]}),"\n",(0,r.jsx)(n.h3,{id:"handling-the-zerodivisionerror-exception",children:"Handling the ZeroDivisionError Exception"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"print(5/0)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will produce:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ZeroDivisionError: division by zero\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-try-except-blocks",children:"Using try-except Blocks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    print(5/0)\nexcept ZeroDivisionError:\n    print("You can\'t divide by zero!")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"You can't divide by zero!\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-exceptions-to-prevent-crashes",children:"Using Exceptions to Prevent Crashes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'print("Give me two numbers, and I\'ll divide them.")\nprint("Enter \'q\' to quit.")\n\nwhile True:\n    first_number = input("\\nFirst number: ")\n    if first_number == \'q\':\n        break\n    second_number = input("Second number: ")\n    if second_number == \'q\':\n        break\n    try:\n        answer = int(first_number) / int(second_number)\n    except ZeroDivisionError:\n        print("You can\'t divide by zero!")\n    else:\n        print(answer)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"the-else-block",children:"The else Block"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    answer = int(first_number) / int(second_number)\nexcept ZeroDivisionError:\n    print("You can\'t divide by zero!")\nelse:\n    print(answer)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"else"})," block will run only if the ",(0,r.jsx)(n.code,{children:"try"})," block was successful."]}),"\n",(0,r.jsx)(n.h3,{id:"handling-the-filenotfounderror-exception",children:"Handling the FileNotFoundError Exception"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"analyzing-text",children:"Analyzing Text"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"filename = 'alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\nelse:\n    # Count the approximate number of words in the file.\n    words = contents.split()\n    num_words = len(words)\n    print(f\"The file {filename} has about {num_words} words.\")\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"split()"})," method creates a list of words from a string."]}),"\n",(0,r.jsx)(n.h3,{id:"working-with-multiple-files",children:"Working with Multiple Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def count_words(filename):\n    \"\"\"Count the approximate number of words in a file.\"\"\"\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        print(f\"Sorry, the file {filename} does not exist.\")\n    else:\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {filename} has about {num_words} words.\")\n\nfilenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt']\nfor filename in filenames:\n    count_words(filename)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"failing-silently",children:"Failing Silently"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you want your program to fail silently when an exception occurs and continue as if nothing happened. You can use the ",(0,r.jsx)(n.code,{children:"pass"})," statement:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def count_words(filename):\n    """Count the approximate number of words in a file."""\n    try:\n        with open(filename, encoding=\'utf-8\') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        words = contents.split()\n        num_words = len(words)\n        print(f"The file {filename} has about {num_words} words.")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deciding-which-errors-to-report",children:"Deciding Which Errors to Report"}),"\n",(0,r.jsx)(n.p,{children:"How do you know when to report an error to your users and when to fail silently? If users know which files are supposed to be analyzed, they might appreciate a message informing them why some files were not analyzed. If users expect to see some results but don't know which files are supposed to be processed, they might not need to know that some files were unavailable."}),"\n",(0,r.jsx)(n.h2,{id:"storing-data",children:"Storing Data"}),"\n",(0,r.jsxs)(n.p,{children:["Many of your programs will ask users to input certain kinds of information. The ",(0,r.jsx)(n.code,{children:"json"})," module allows you to dump simple Python data structures into a file and load the data from that file the next time the program runs."]}),"\n",(0,r.jsx)(n.h3,{id:"using-jsondump-and-jsonload",children:"Using json.dump() and json.load()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n\nnumbers = [2, 3, 5, 7, 11, 13]\n\nfilename = 'numbers.json'\nwith open(filename, 'w') as f:\n    json.dump(numbers, f)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now let's write a program that loads the list back into memory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n\nfilename = 'numbers.json'\nwith open(filename) as f:\n    numbers = json.load(f)\n\nprint(numbers)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[2, 3, 5, 7, 11, 13]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"saving-and-reading-user-generated-data",children:"Saving and Reading User-Generated Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n\nusername = input(\"What is your name? \")\n\nfilename = 'username.json'\nwith open(filename, 'w') as f:\n    json.dump(username, f)\n    print(f\"We'll remember you when you come back, {username}!\")\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now let's write a program that greets a user whose name has already been stored:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n\nfilename = 'username.json'\n\nwith open(filename) as f:\n    username = json.load(f)\n    print(f\"Welcome back, {username}!\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"combining-the-programs",children:"Combining the Programs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\n\nfilename = \'username.json\'\n\ntry:\n    with open(filename) as f:\n        username = json.load(f)\nexcept FileNotFoundError:\n    username = input("What is your name? ")\n    with open(filename, \'w\') as f:\n        json.dump(username, f)\n        print(f"We\'ll remember you when you come back, {username}!")\nelse:\n    print(f"Welcome back, {username}!")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"refactoring",children:"Refactoring"}),"\n",(0,r.jsx)(n.p,{children:"Often, you'll come to a point where your code will work, but you'll recognize that you could improve the code by breaking it up into a series of functions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\n\ndef get_stored_username():\n    """Get stored username if available."""\n    filename = \'username.json\'\n    try:\n        with open(filename) as f:\n            username = json.load(f)\n    except FileNotFoundError:\n        return None\n    else:\n        return username\n\ndef get_new_username():\n    """Prompt for a new username."""\n    username = input("What is your name? ")\n    filename = \'username.json\'\n    with open(filename, \'w\') as f:\n        json.dump(username, f)\n    return username\n\ndef greet_user():\n    """Greet the user by name."""\n    username = get_stored_username()\n    if username:\n        print(f"Welcome back, {username}!")\n    else:\n        username = get_new_username()\n        print(f"We\'ll remember you when you come back, {username}!")\n\ngreet_user()\n'})}),"\n",(0,r.jsx)(n.p,{children:"Each function in this final version has a single, clear purpose. This compartmentalized work makes your code easier to write, read, test, and maintain."}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"In this chapter you learned how to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Read entire files and read files line by line"}),"\n",(0,r.jsx)(n.li,{children:"Work with absolute and relative file paths"}),"\n",(0,r.jsx)(n.li,{children:"Write text to files using write mode and append mode"}),"\n",(0,r.jsx)(n.li,{children:"Use try-except blocks to handle exceptions gracefully"}),"\n",(0,r.jsx)(n.li,{children:"Store Python data structures using the JSON format"}),"\n",(0,r.jsx)(n.li,{children:"Refactor code to make it cleaner and easier to extend"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Files and exception handling will help you work with data from files and handle errors that might occur in your programs, making your programs more robust and user-friendly."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);